
Home Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000005e2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000171f  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000911  00000000  00000000  00001f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c4  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000542  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001001  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 38       	cpi	r26, 0x88	; 136
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <main>
  8e:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_start>:
{
	TX(PREAMBLE);
	TX(PREAMBLE);
	TX(PREAMBLE);
	TX(KEYWORD2);
	TX(FEEDBACK);
  96:	ec eb       	ldi	r30, 0xBC	; 188
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
  9c:	94 ea       	ldi	r25, 0xA4	; 164
  9e:	90 83       	st	Z, r25
  a0:	90 81       	ld	r25, Z
  a2:	99 23       	and	r25, r25
  a4:	ec f7       	brge	.-6      	; 0xa0 <i2c_start+0xa>
  a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	98 7f       	andi	r25, 0xF8	; 248
  ac:	98 30       	cpi	r25, 0x08	; 8
  ae:	a1 f4       	brne	.+40     	; 0xd8 <i2c_start+0x42>
  b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ba:	ec eb       	ldi	r30, 0xBC	; 188
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <i2c_start+0x28>
  c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	98 31       	cpi	r25, 0x18	; 24
  cc:	39 f0       	breq	.+14     	; 0xdc <i2c_start+0x46>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 34       	cpi	r25, 0x40	; 64
  d2:	29 f4       	brne	.+10     	; 0xde <i2c_start+0x48>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret

000000e0 <i2c_write>:
  e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <i2c_write+0xe>
  f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	98 32       	cpi	r25, 0x28	; 40
  fe:	09 f4       	brne	.+2      	; 0x102 <i2c_write+0x22>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret

00000104 <Dec_Hex>:
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	9c 01       	movw	r18, r24
 10a:	fb 01       	movw	r30, r22
 10c:	64 e6       	ldi	r22, 0x64	; 100
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0e 94 c7 02 	call	0x58e	; 0x58e <__divmodhi4>
 114:	8b 01       	movw	r16, r22
 116:	4c e9       	ldi	r20, 0x9C	; 156
 118:	46 03       	mulsu	r20, r22
 11a:	c0 01       	movw	r24, r0
 11c:	47 9f       	mul	r20, r23
 11e:	90 0d       	add	r25, r0
 120:	11 24       	eor	r1, r1
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	6a e0       	ldi	r22, 0x0A	; 10
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 c7 02 	call	0x58e	; 0x58e <__divmodhi4>
 12e:	c8 01       	movw	r24, r16
 130:	c0 96       	adiw	r24, 0x30	; 48
 132:	95 83       	std	Z+5, r25	; 0x05
 134:	84 83       	std	Z+4, r24	; 0x04
 136:	cb 01       	movw	r24, r22
 138:	c0 96       	adiw	r24, 0x30	; 48
 13a:	93 83       	std	Z+3, r25	; 0x03
 13c:	82 83       	std	Z+2, r24	; 0x02
 13e:	44 e6       	ldi	r20, 0x64	; 100
 140:	40 9f       	mul	r20, r16
 142:	c0 01       	movw	r24, r0
 144:	41 9f       	mul	r20, r17
 146:	90 0d       	add	r25, r0
 148:	11 24       	eor	r1, r1
 14a:	ab 01       	movw	r20, r22
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	66 0f       	add	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	64 0f       	add	r22, r20
 15e:	75 1f       	adc	r23, r21
 160:	68 0f       	add	r22, r24
 162:	79 1f       	adc	r23, r25
 164:	26 1b       	sub	r18, r22
 166:	37 0b       	sbc	r19, r23
 168:	20 5d       	subi	r18, 0xD0	; 208
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <LCD_Clear>:
 176:	8e ef       	ldi	r24, 0xFE	; 254
 178:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 17c:	81 e5       	ldi	r24, 0x51	; 81
 17e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 182:	08 95       	ret

00000184 <LCD_2line>:
 184:	8e ef       	ldi	r24, 0xFE	; 254
 186:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 18a:	85 e4       	ldi	r24, 0x45	; 69
 18c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 196:	08 95       	ret

00000198 <LCD_3line>:
 198:	8e ef       	ldi	r24, 0xFE	; 254
 19a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 19e:	85 e4       	ldi	r24, 0x45	; 69
 1a0:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1a4:	84 e1       	ldi	r24, 0x14	; 20
 1a6:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1aa:	08 95       	ret

000001ac <LCD_4line>:
 1ac:	8e ef       	ldi	r24, 0xFE	; 254
 1ae:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1b2:	85 e4       	ldi	r24, 0x45	; 69
 1b4:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1b8:	84 e5       	ldi	r24, 0x54	; 84
 1ba:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1be:	08 95       	ret

000001c0 <Lookup>:
 1c0:	ef 92       	push	r14
 1c2:	ff 92       	push	r15
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	61 15       	cp	r22, r1
 1cc:	71 05       	cpc	r23, r1
 1ce:	a1 f0       	breq	.+40     	; 0x1f8 <Lookup+0x38>
 1d0:	7b 01       	movw	r14, r22
 1d2:	08 2f       	mov	r16, r24
 1d4:	19 2f       	mov	r17, r25
 1d6:	f8 01       	movw	r30, r16
 1d8:	c1 91       	ld	r28, Z+
 1da:	8f 01       	movw	r16, r30
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1e2:	83 ec       	ldi	r24, 0xC3	; 195
 1e4:	99 e0       	ldi	r25, 0x09	; 9
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <Lookup+0x26>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <Lookup+0x2c>
 1ec:	00 00       	nop
 1ee:	8c 2f       	mov	r24, r28
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	e8 16       	cp	r14, r24
 1f4:	f9 06       	cpc	r15, r25
 1f6:	79 f7       	brne	.-34     	; 0x1d6 <Lookup+0x16>
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	0f 91       	pop	r16
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	08 95       	ret

00000204 <Intro>:
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	ef 97       	sbiw	r28, 0x3f	; 63
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	e8 e4       	ldi	r30, 0x48	; 72
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	de 01       	movw	r26, r28
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	01 90       	ld	r0, Z+
 224:	0d 92       	st	X+, r0
 226:	8a 95       	dec	r24
 228:	e1 f7       	brne	.-8      	; 0x222 <Intro+0x1e>
 22a:	82 e1       	ldi	r24, 0x12	; 18
 22c:	e8 e5       	ldi	r30, 0x58	; 88
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	de 01       	movw	r26, r28
 232:	51 96       	adiw	r26, 0x11	; 17
 234:	01 90       	ld	r0, Z+
 236:	0d 92       	st	X+, r0
 238:	8a 95       	dec	r24
 23a:	e1 f7       	brne	.-8      	; 0x234 <Intro+0x30>
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	ea e6       	ldi	r30, 0x6A	; 106
 240:	f1 e0       	ldi	r31, 0x01	; 1
 242:	de 01       	movw	r26, r28
 244:	93 96       	adiw	r26, 0x23	; 35
 246:	01 90       	ld	r0, Z+
 248:	0d 92       	st	X+, r0
 24a:	8a 95       	dec	r24
 24c:	e1 f7       	brne	.-8      	; 0x246 <Intro+0x42>
 24e:	8e e0       	ldi	r24, 0x0E	; 14
 250:	e9 e7       	ldi	r30, 0x79	; 121
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	de 01       	movw	r26, r28
 256:	d2 96       	adiw	r26, 0x32	; 50
 258:	01 90       	ld	r0, Z+
 25a:	0d 92       	st	X+, r0
 25c:	8a 95       	dec	r24
 25e:	e1 f7       	brne	.-8      	; 0x258 <Intro+0x54>
 260:	80 e5       	ldi	r24, 0x50	; 80
 262:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 266:	8f e0       	ldi	r24, 0x0F	; 15
 268:	97 e2       	ldi	r25, 0x27	; 39
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <Intro+0x66>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <Intro+0x6c>
 270:	00 00       	nop
 272:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Clear>
 276:	61 e2       	ldi	r22, 0x21	; 33
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
 282:	8f e0       	ldi	r24, 0x0F	; 15
 284:	97 e2       	ldi	r25, 0x27	; 39
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <Intro+0x82>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <Intro+0x88>
 28c:	00 00       	nop
 28e:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_2line>
 292:	64 e6       	ldi	r22, 0x64	; 100
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	ce 01       	movw	r24, r28
 298:	41 96       	adiw	r24, 0x11	; 17
 29a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	97 e2       	ldi	r25, 0x27	; 39
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <Intro+0x9e>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <Intro+0xa4>
 2a8:	00 00       	nop
 2aa:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_3line>
 2ae:	62 e7       	ldi	r22, 0x72	; 114
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	ce 01       	movw	r24, r28
 2b4:	83 96       	adiw	r24, 0x23	; 35
 2b6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
 2ba:	8f e0       	ldi	r24, 0x0F	; 15
 2bc:	97 e2       	ldi	r25, 0x27	; 39
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <Intro+0xba>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <Intro+0xc0>
 2c4:	00 00       	nop
 2c6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_4line>
 2ca:	6e e2       	ldi	r22, 0x2E	; 46
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	ce 01       	movw	r24, r28
 2d0:	c2 96       	adiw	r24, 0x32	; 50
 2d2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	24 e3       	ldi	r18, 0x34	; 52
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	91 50       	subi	r25, 0x01	; 1
 2de:	20 40       	sbci	r18, 0x00	; 0
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <Intro+0xd8>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <Intro+0xe2>
 2e6:	00 00       	nop
 2e8:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Clear>
 2ec:	84 e9       	ldi	r24, 0x94	; 148
 2ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2f2:	ef 96       	adiw	r28, 0x3f	; 63
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <USART>:
 304:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 308:	83 e3       	ldi	r24, 0x33	; 51
 30a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 30e:	e0 ec       	ldi	r30, 0xC0	; 192
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	82 60       	ori	r24, 0x02	; 2
 316:	80 83       	st	Z, r24
 318:	8e e0       	ldi	r24, 0x0E	; 14
 31a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 31e:	08 95       	ret

00000320 <RX>:
 320:	e0 ec       	ldi	r30, 0xC0	; 192
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	88 23       	and	r24, r24
 328:	ec f7       	brge	.-6      	; 0x324 <RX+0x4>
 32a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	08 95       	ret

00000332 <TX>:
 332:	98 e0       	ldi	r25, 0x08	; 8
 334:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 338:	e0 ec       	ldi	r30, 0xC0	; 192
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	90 81       	ld	r25, Z
 33e:	95 ff       	sbrs	r25, 5
 340:	fd cf       	rjmp	.-6      	; 0x33c <TX+0xa>
 342:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 346:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 34a:	08 95       	ret

0000034c <Packet_Alarm>:
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	c8 2f       	mov	r28, r24
 352:	d6 2f       	mov	r29, r22
 354:	80 e4       	ldi	r24, 0x40	; 64
 356:	0e 94 99 01 	call	0x332	; 0x332 <TX>
 35a:	80 e4       	ldi	r24, 0x40	; 64
 35c:	0e 94 99 01 	call	0x332	; 0x332 <TX>
 360:	80 e4       	ldi	r24, 0x40	; 64
 362:	0e 94 99 01 	call	0x332	; 0x332 <TX>
 366:	81 e2       	ldi	r24, 0x21	; 33
 368:	0e 94 99 01 	call	0x332	; 0x332 <TX>
 36c:	8d 2f       	mov	r24, r29
 36e:	0e 94 99 01 	call	0x332	; 0x332 <TX>
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 99 01 	call	0x332	; 0x332 <TX>
 378:	8d 2f       	mov	r24, r29
 37a:	8c 0f       	add	r24, r28
 37c:	0e 94 99 01 	call	0x332	; 0x332 <TX>
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <Check_Packet>:
//********************************************** Check Packet and Checksum
char Check_Packet(void)
{
	char address=0; 
	
	while (RX()!= KEYWORD); 
 386:	0e 94 90 01 	call	0x320	; 0x320 <RX>
 38a:	c7 97       	sbiw	r24, 0x37	; 55
 38c:	e1 f7       	brne	.-8      	; 0x386 <Check_Packet>
	address =RX(); 
 38e:	0e 94 90 01 	call	0x320	; 0x320 <RX>
	
	return address;	
}
 392:	08 95       	ret

00000394 <Checksum_Check>:
char Checksum_Check(char adr)
{
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	d8 2f       	mov	r29, r24
	char data=0;
	char checksum=0; 
	char checksum_C=0; 
	
	data = RX(); 
 39a:	0e 94 90 01 	call	0x320	; 0x320 <RX>
 39e:	c8 2f       	mov	r28, r24
	checksum = RX(); 
 3a0:	0e 94 90 01 	call	0x320	; 0x320 <RX>
	
	UCSR0B = (0 << RXEN0);
 3a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//Packet_feedback();
	//_delay_ms(40);
		
	//} else
	
	if (checksum_C == checksum)
 3a8:	dc 0f       	add	r29, r28
 3aa:	d8 13       	cpse	r29, r24
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <Checksum_Check+0x1e>
	return data;
 3ae:	8c 2f       	mov	r24, r28
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <Checksum_Check+0x1e>
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <main>:
char Pulse_Repo[] = {"NA"};
char BloodPD1[] = {"SBP Right (mmHg)>"};
char BloodPD2[] = {"SBP Left  (mmHg)>"};

int main(void)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	00 d0       	rcall	.+0      	; 0x3be <main+0x6>
 3be:	1f 92       	push	r1
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 3c4:	8d ef       	ldi	r24, 0xFD	; 253
 3c6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    /* Enable the ADC and LCD functions */
    i2c_init();
    USART ();
 3ca:	0e 94 82 01 	call	0x304	; 0x304 <USART>
    int BP1= 0;
    int BP2= 0;
	char adr= 0;
	
	/* LCD Title Display */
	Intro(); 
 3ce:	0e 94 02 01 	call	0x204	; 0x204 <Intro>
    i2c_init();
    USART ();
    
    /*Variables*/
    int temp = 0;
    int BPM= 0;						//BPM calculation
 3d2:	c1 2c       	mov	r12, r1
 3d4:	d1 2c       	mov	r13, r1
	Intro(); 
	
	/* START MAIN */
	for(;;)
	{
		UCSR0B = (1 << RXEN0);
 3d6:	0f 2e       	mov	r0, r31
 3d8:	f1 ec       	ldi	r31, 0xC1	; 193
 3da:	ef 2e       	mov	r14, r31
 3dc:	f1 2c       	mov	r15, r1
 3de:	f0 2d       	mov	r31, r0
 3e0:	10 e1       	ldi	r17, 0x10	; 16
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3e2:	0f 2e       	mov	r0, r31
 3e4:	fc eb       	ldi	r31, 0xBC	; 188
 3e6:	af 2e       	mov	r10, r31
 3e8:	b1 2c       	mov	r11, r1
 3ea:	f0 2d       	mov	r31, r0
 3ec:	04 e9       	ldi	r16, 0x94	; 148
 3ee:	f7 01       	movw	r30, r14
 3f0:	10 83       	st	Z, r17
		adr= Check_Packet(); 
 3f2:	0e 94 c3 01 	call	0x386	; 0x386 <Check_Packet>
		
		/* Heart Sensor *******************************************************/
		if (adr== BPMADDRESS)
 3f6:	81 33       	cpi	r24, 0x31	; 49
 3f8:	d9 f5       	brne	.+118    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		{
			BPM= Checksum_Check(adr); 
 3fa:	0e 94 ca 01 	call	0x394	; 0x394 <Checksum_Check>
 3fe:	98 2e       	mov	r9, r24
 400:	c8 2e       	mov	r12, r24
 402:	d1 2c       	mov	r13, r1
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 404:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(BPM, LCD);
 406:	be 01       	movw	r22, r28
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	c6 01       	movw	r24, r12
 40e:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 412:	80 e5       	ldi	r24, 0x50	; 80
 414:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 418:	8f e0       	ldi	r24, 0x0F	; 15
 41a:	97 e2       	ldi	r25, 0x27	; 39
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
			_delay_ms(40);
			end= 0x3E;
			Lookup (BPMD, end);
 424:	6e e3       	ldi	r22, 0x3E	; 62
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	86 e3       	ldi	r24, 0x36	; 54
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
			i2c_write(LCD[2]);
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]);					
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]);				
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 442:	f5 01       	movw	r30, r10
 444:	00 83       	st	Z, r16
			i2c_stop();
			
			if ((110<BPM) | (BPM>60))
 446:	fd e3       	ldi	r31, 0x3D	; 61
 448:	cf 16       	cp	r12, r31
 44a:	d1 04       	cpc	r13, r1
 44c:	84 f2       	brlt	.-96     	; 0x3ee <main+0x36>
 44e:	89 ef       	ldi	r24, 0xF9	; 249
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
			{
				_delay_ms(1);
				Packet_Alarm(BPM, BPMADDRESS);
 45a:	61 e3       	ldi	r22, 0x31	; 49
 45c:	89 2d       	mov	r24, r9
 45e:	0e 94 a6 01 	call	0x34c	; 0x34c <Packet_Alarm>
 462:	ef e0       	ldi	r30, 0x0F	; 15
 464:	f7 e2       	ldi	r31, 0x27	; 39
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
 46e:	bf cf       	rjmp	.-130    	; 0x3ee <main+0x36>
				_delay_ms(40);
			}
			
		}
		/* Temperature *******************************************************/
		else if (adr== tempADDRESS)
 470:	82 33       	cpi	r24, 0x32	; 50
 472:	e1 f5       	brne	.+120    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		{
			temp= Checksum_Check(adr); 
 474:	0e 94 ca 01 	call	0x394	; 0x394 <Checksum_Check>
 478:	98 2e       	mov	r9, r24
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 47a:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(temp, LCD);
 47c:	be 01       	movw	r22, r28
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 488:	80 e5       	ldi	r24, 0x50	; 80
 48a:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 48e:	8f e0       	ldi	r24, 0x0F	; 15
 490:	97 e2       	ldi	r25, 0x27	; 39
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 496:	00 c0       	rjmp	.+0      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 498:	00 00       	nop
			_delay_ms(40);
			LCD_2line ();
 49a:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_2line>
			end= 0x3E;
			Lookup (TempD, end);
 49e:	6e e3       	ldi	r22, 0x3E	; 62
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	84 e2       	ldi	r24, 0x24	; 36
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
			i2c_write(LCD[2]);
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]);
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]);
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 4bc:	f5 01       	movw	r30, r10
 4be:	00 83       	st	Z, r16
			i2c_stop();
			
			if ((38<BPM) | (BPM<36))
 4c0:	c6 01       	movw	r24, r12
 4c2:	84 97       	sbiw	r24, 0x24	; 36
 4c4:	03 97       	sbiw	r24, 0x03	; 3
 4c6:	08 f4       	brcc	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c8:	92 cf       	rjmp	.-220    	; 0x3ee <main+0x36>
 4ca:	89 ef       	ldi	r24, 0xF9	; 249
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d4:	00 00       	nop
			{
				_delay_ms(1);
				Packet_Alarm(temp, tempADDRESS);
 4d6:	62 e3       	ldi	r22, 0x32	; 50
 4d8:	89 2d       	mov	r24, r9
 4da:	0e 94 a6 01 	call	0x34c	; 0x34c <Packet_Alarm>
 4de:	ef e0       	ldi	r30, 0x0F	; 15
 4e0:	f7 e2       	ldi	r31, 0x27	; 39
 4e2:	31 97       	sbiw	r30, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e8:	00 00       	nop
 4ea:	81 cf       	rjmp	.-254    	; 0x3ee <main+0x36>
				_delay_ms(40);
			}
		}
		/* Temperature *******************************************************/
		else if (adr== BP1ADDRESS)
 4ec:	83 33       	cpi	r24, 0x33	; 51
 4ee:	31 f5       	brne	.+76     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
		{
			BP1= Checksum_Check(adr); 
 4f0:	0e 94 ca 01 	call	0x394	; 0x394 <Checksum_Check>
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 4f4:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(BP1, LCD);
 4f6:	be 01       	movw	r22, r28
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 502:	80 e5       	ldi	r24, 0x50	; 80
 504:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 508:	8f e0       	ldi	r24, 0x0F	; 15
 50a:	97 e2       	ldi	r25, 0x27	; 39
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 510:	00 c0       	rjmp	.+0      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 512:	00 00       	nop
			_delay_ms(40);
			LCD_3line();
 514:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_3line>
			end= 0x3E;
			Lookup (BloodPD1, end);
 518:	6e e3       	ldi	r22, 0x3E	; 62
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	82 e1       	ldi	r24, 0x12	; 18
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
			i2c_write(LCD[2]);
 524:	8b 81       	ldd	r24, Y+3	; 0x03
 526:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]);
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]);
 530:	89 81       	ldd	r24, Y+1	; 0x01
 532:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 536:	f5 01       	movw	r30, r10
 538:	00 83       	st	Z, r16
 53a:	59 cf       	rjmp	.-334    	; 0x3ee <main+0x36>
			i2c_stop();
			
		}
		/* Temperature *******************************************************/
		else if (adr== BP2ADDRESS)
 53c:	84 33       	cpi	r24, 0x34	; 52
 53e:	09 f0       	breq	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	56 cf       	rjmp	.-340    	; 0x3ee <main+0x36>
		{
			BP2= Checksum_Check(adr); 
 542:	0e 94 ca 01 	call	0x394	; 0x394 <Checksum_Check>
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 546:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(BP2, LCD);
 548:	be 01       	movw	r22, r28
 54a:	6f 5f       	subi	r22, 0xFF	; 255
 54c:	7f 4f       	sbci	r23, 0xFF	; 255
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 554:	80 e5       	ldi	r24, 0x50	; 80
 556:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 55a:	8f e0       	ldi	r24, 0x0F	; 15
 55c:	97 e2       	ldi	r25, 0x27	; 39
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 562:	00 c0       	rjmp	.+0      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 564:	00 00       	nop
			_delay_ms(40);
			LCD_4line ();
 566:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_4line>
			end= 0x3E;
			Lookup (BloodPD2, end);
 56a:	6e e3       	ldi	r22, 0x3E	; 62
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <Lookup>
			i2c_write(LCD[2]);
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]);
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]);
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 588:	f5 01       	movw	r30, r10
 58a:	00 83       	st	Z, r16
 58c:	30 cf       	rjmp	.-416    	; 0x3ee <main+0x36>

0000058e <__divmodhi4>:
 58e:	97 fb       	bst	r25, 7
 590:	07 2e       	mov	r0, r23
 592:	16 f4       	brtc	.+4      	; 0x598 <__divmodhi4+0xa>
 594:	00 94       	com	r0
 596:	07 d0       	rcall	.+14     	; 0x5a6 <__divmodhi4_neg1>
 598:	77 fd       	sbrc	r23, 7
 59a:	09 d0       	rcall	.+18     	; 0x5ae <__divmodhi4_neg2>
 59c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__udivmodhi4>
 5a0:	07 fc       	sbrc	r0, 7
 5a2:	05 d0       	rcall	.+10     	; 0x5ae <__divmodhi4_neg2>
 5a4:	3e f4       	brtc	.+14     	; 0x5b4 <__divmodhi4_exit>

000005a6 <__divmodhi4_neg1>:
 5a6:	90 95       	com	r25
 5a8:	81 95       	neg	r24
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	08 95       	ret

000005ae <__divmodhi4_neg2>:
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255

000005b4 <__divmodhi4_exit>:
 5b4:	08 95       	ret

000005b6 <__udivmodhi4>:
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	51 e1       	ldi	r21, 0x11	; 17
 5bc:	07 c0       	rjmp	.+14     	; 0x5cc <__udivmodhi4_ep>

000005be <__udivmodhi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	a6 17       	cp	r26, r22
 5c4:	b7 07       	cpc	r27, r23
 5c6:	10 f0       	brcs	.+4      	; 0x5cc <__udivmodhi4_ep>
 5c8:	a6 1b       	sub	r26, r22
 5ca:	b7 0b       	sbc	r27, r23

000005cc <__udivmodhi4_ep>:
 5cc:	88 1f       	adc	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	5a 95       	dec	r21
 5d2:	a9 f7       	brne	.-22     	; 0x5be <__udivmodhi4_loop>
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	bc 01       	movw	r22, r24
 5da:	cd 01       	movw	r24, r26
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
