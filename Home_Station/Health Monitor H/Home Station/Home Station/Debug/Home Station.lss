
Home Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000005d0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001722  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000911  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c3  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  0000321c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000542  00000000  00000000  000034cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fd2  00000000  00000000  00003a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000049e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 38       	cpi	r26, 0x88	; 136
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
  8e:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_start>:
{
	TX(PREAMBLE);
	TX(PREAMBLE);
	TX(PREAMBLE);
	TX(KEYWORD2);
	TX(FEEDBACK);
  96:	ec eb       	ldi	r30, 0xBC	; 188
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
  9c:	94 ea       	ldi	r25, 0xA4	; 164
  9e:	90 83       	st	Z, r25
  a0:	90 81       	ld	r25, Z
  a2:	99 23       	and	r25, r25
  a4:	ec f7       	brge	.-6      	; 0xa0 <i2c_start+0xa>
  a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	98 7f       	andi	r25, 0xF8	; 248
  ac:	98 30       	cpi	r25, 0x08	; 8
  ae:	a1 f4       	brne	.+40     	; 0xd8 <i2c_start+0x42>
  b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ba:	ec eb       	ldi	r30, 0xBC	; 188
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <i2c_start+0x28>
  c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	98 31       	cpi	r25, 0x18	; 24
  cc:	39 f0       	breq	.+14     	; 0xdc <i2c_start+0x46>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 34       	cpi	r25, 0x40	; 64
  d2:	29 f4       	brne	.+10     	; 0xde <i2c_start+0x48>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret

000000e0 <i2c_write>:
  e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <i2c_write+0xe>
  f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	98 32       	cpi	r25, 0x28	; 40
  fe:	09 f4       	brne	.+2      	; 0x102 <i2c_write+0x22>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret

00000104 <Dec_Hex>:
 104:	9c 01       	movw	r18, r24
 106:	fb 01       	movw	r30, r22
 108:	64 e6       	ldi	r22, 0x64	; 100
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 110:	46 2f       	mov	r20, r22
 112:	c9 01       	movw	r24, r18
 114:	54 e6       	ldi	r21, 0x64	; 100
 116:	65 9f       	mul	r22, r21
 118:	80 19       	sub	r24, r0
 11a:	91 09       	sbc	r25, r1
 11c:	11 24       	eor	r1, r1
 11e:	6a e0       	ldi	r22, 0x0A	; 10
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 be 02 	call	0x57c	; 0x57c <__divmodhi4>
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	84 0f       	add	r24, r20
 12a:	82 83       	std	Z+2, r24	; 0x02
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	86 0f       	add	r24, r22
 130:	81 83       	std	Z+1, r24	; 0x01
 132:	20 5d       	subi	r18, 0xD0	; 208
 134:	84 e6       	ldi	r24, 0x64	; 100
 136:	48 9f       	mul	r20, r24
 138:	20 19       	sub	r18, r0
 13a:	11 24       	eor	r1, r1
 13c:	66 0f       	add	r22, r22
 13e:	86 2f       	mov	r24, r22
 140:	88 0f       	add	r24, r24
 142:	88 0f       	add	r24, r24
 144:	68 0f       	add	r22, r24
 146:	26 1b       	sub	r18, r22
 148:	20 83       	st	Z, r18
 14a:	08 95       	ret

0000014c <LCD_Clear>:
 14c:	8e ef       	ldi	r24, 0xFE	; 254
 14e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 152:	81 e5       	ldi	r24, 0x51	; 81
 154:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 158:	08 95       	ret

0000015a <LCD_1line>:
 15a:	8e ef       	ldi	r24, 0xFE	; 254
 15c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 160:	85 e4       	ldi	r24, 0x45	; 69
 162:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 16c:	08 95       	ret

0000016e <LCD_2line>:
 16e:	8e ef       	ldi	r24, 0xFE	; 254
 170:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 174:	85 e4       	ldi	r24, 0x45	; 69
 176:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 17a:	80 e4       	ldi	r24, 0x40	; 64
 17c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 180:	08 95       	ret

00000182 <LCD_3line>:
 182:	8e ef       	ldi	r24, 0xFE	; 254
 184:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 188:	85 e4       	ldi	r24, 0x45	; 69
 18a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 194:	08 95       	ret

00000196 <LCD_4line>:
 196:	8e ef       	ldi	r24, 0xFE	; 254
 198:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 19c:	85 e4       	ldi	r24, 0x45	; 69
 19e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1a2:	84 e5       	ldi	r24, 0x54	; 84
 1a4:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1a8:	08 95       	ret

000001aa <Lookup>:
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	61 15       	cp	r22, r1
 1b6:	71 05       	cpc	r23, r1
 1b8:	a1 f0       	breq	.+40     	; 0x1e2 <Lookup+0x38>
 1ba:	7b 01       	movw	r14, r22
 1bc:	08 2f       	mov	r16, r24
 1be:	19 2f       	mov	r17, r25
 1c0:	f8 01       	movw	r30, r16
 1c2:	c1 91       	ld	r28, Z+
 1c4:	8f 01       	movw	r16, r30
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1cc:	83 ec       	ldi	r24, 0xC3	; 195
 1ce:	99 e0       	ldi	r25, 0x09	; 9
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <Lookup+0x26>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <Lookup+0x2c>
 1d6:	00 00       	nop
 1d8:	8c 2f       	mov	r24, r28
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	e8 16       	cp	r14, r24
 1de:	f9 06       	cpc	r15, r25
 1e0:	79 f7       	brne	.-34     	; 0x1c0 <Lookup+0x16>
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	08 95       	ret

000001ee <Intro>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	ef 97       	sbiw	r28, 0x3f	; 63
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	80 e1       	ldi	r24, 0x10	; 16
 204:	e8 e4       	ldi	r30, 0x48	; 72
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	de 01       	movw	r26, r28
 20a:	11 96       	adiw	r26, 0x01	; 1
 20c:	01 90       	ld	r0, Z+
 20e:	0d 92       	st	X+, r0
 210:	8a 95       	dec	r24
 212:	e1 f7       	brne	.-8      	; 0x20c <Intro+0x1e>
 214:	82 e1       	ldi	r24, 0x12	; 18
 216:	e8 e5       	ldi	r30, 0x58	; 88
 218:	f1 e0       	ldi	r31, 0x01	; 1
 21a:	de 01       	movw	r26, r28
 21c:	51 96       	adiw	r26, 0x11	; 17
 21e:	01 90       	ld	r0, Z+
 220:	0d 92       	st	X+, r0
 222:	8a 95       	dec	r24
 224:	e1 f7       	brne	.-8      	; 0x21e <Intro+0x30>
 226:	8f e0       	ldi	r24, 0x0F	; 15
 228:	ea e6       	ldi	r30, 0x6A	; 106
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	de 01       	movw	r26, r28
 22e:	93 96       	adiw	r26, 0x23	; 35
 230:	01 90       	ld	r0, Z+
 232:	0d 92       	st	X+, r0
 234:	8a 95       	dec	r24
 236:	e1 f7       	brne	.-8      	; 0x230 <Intro+0x42>
 238:	8e e0       	ldi	r24, 0x0E	; 14
 23a:	e9 e7       	ldi	r30, 0x79	; 121
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	de 01       	movw	r26, r28
 240:	d2 96       	adiw	r26, 0x32	; 50
 242:	01 90       	ld	r0, Z+
 244:	0d 92       	st	X+, r0
 246:	8a 95       	dec	r24
 248:	e1 f7       	brne	.-8      	; 0x242 <Intro+0x54>
 24a:	80 e5       	ldi	r24, 0x50	; 80
 24c:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 250:	8f e0       	ldi	r24, 0x0F	; 15
 252:	97 e2       	ldi	r25, 0x27	; 39
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Intro+0x66>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Intro+0x6c>
 25a:	00 00       	nop
 25c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Clear>
 260:	61 e2       	ldi	r22, 0x21	; 33
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	97 e2       	ldi	r25, 0x27	; 39
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <Intro+0x82>
 274:	00 c0       	rjmp	.+0      	; 0x276 <Intro+0x88>
 276:	00 00       	nop
 278:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_2line>
 27c:	64 e6       	ldi	r22, 0x64	; 100
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	ce 01       	movw	r24, r28
 282:	41 96       	adiw	r24, 0x11	; 17
 284:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
 288:	8f e0       	ldi	r24, 0x0F	; 15
 28a:	97 e2       	ldi	r25, 0x27	; 39
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <Intro+0x9e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <Intro+0xa4>
 292:	00 00       	nop
 294:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_3line>
 298:	62 e7       	ldi	r22, 0x72	; 114
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	ce 01       	movw	r24, r28
 29e:	83 96       	adiw	r24, 0x23	; 35
 2a0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
 2a4:	8f e0       	ldi	r24, 0x0F	; 15
 2a6:	97 e2       	ldi	r25, 0x27	; 39
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Intro+0xba>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Intro+0xc0>
 2ae:	00 00       	nop
 2b0:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_4line>
 2b4:	6e e2       	ldi	r22, 0x2E	; 46
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	ce 01       	movw	r24, r28
 2ba:	c2 96       	adiw	r24, 0x32	; 50
 2bc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
 2c2:	24 e3       	ldi	r18, 0x34	; 52
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	91 50       	subi	r25, 0x01	; 1
 2c8:	20 40       	sbci	r18, 0x00	; 0
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <Intro+0xd8>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <Intro+0xe2>
 2d0:	00 00       	nop
 2d2:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_Clear>
 2d6:	84 e9       	ldi	r24, 0x94	; 148
 2d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2dc:	ef 96       	adiw	r28, 0x3f	; 63
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <USART>:
 2ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2f2:	83 e3       	ldi	r24, 0x33	; 51
 2f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2f8:	e0 ec       	ldi	r30, 0xC0	; 192
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	80 83       	st	Z, r24
 302:	8e e0       	ldi	r24, 0x0E	; 14
 304:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 308:	08 95       	ret

0000030a <RX>:
 30a:	e0 ec       	ldi	r30, 0xC0	; 192
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 23       	and	r24, r24
 312:	ec f7       	brge	.-6      	; 0x30e <RX+0x4>
 314:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	08 95       	ret

0000031c <TX>:
 31c:	98 e0       	ldi	r25, 0x08	; 8
 31e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 322:	e0 ec       	ldi	r30, 0xC0	; 192
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	95 ff       	sbrs	r25, 5
 32a:	fd cf       	rjmp	.-6      	; 0x326 <TX+0xa>
 32c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 330:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 334:	08 95       	ret

00000336 <Packet_Alarm>:
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	c8 2f       	mov	r28, r24
 33c:	d6 2f       	mov	r29, r22
 33e:	80 e4       	ldi	r24, 0x40	; 64
 340:	0e 94 8e 01 	call	0x31c	; 0x31c <TX>
 344:	80 e4       	ldi	r24, 0x40	; 64
 346:	0e 94 8e 01 	call	0x31c	; 0x31c <TX>
 34a:	80 e4       	ldi	r24, 0x40	; 64
 34c:	0e 94 8e 01 	call	0x31c	; 0x31c <TX>
 350:	81 e2       	ldi	r24, 0x21	; 33
 352:	0e 94 8e 01 	call	0x31c	; 0x31c <TX>
 356:	8d 2f       	mov	r24, r29
 358:	0e 94 8e 01 	call	0x31c	; 0x31c <TX>
 35c:	8c 2f       	mov	r24, r28
 35e:	0e 94 8e 01 	call	0x31c	; 0x31c <TX>
 362:	8d 2f       	mov	r24, r29
 364:	8c 0f       	add	r24, r28
 366:	0e 94 8e 01 	call	0x31c	; 0x31c <TX>
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <Check_Packet>:
//********************************************** Check Packet and Checksum
char Check_Packet(void)
{
	char address=0; 
	
	while (RX()!= KEYWORD); 
 370:	0e 94 85 01 	call	0x30a	; 0x30a <RX>
 374:	c7 97       	sbiw	r24, 0x37	; 55
 376:	e1 f7       	brne	.-8      	; 0x370 <Check_Packet>
	address =RX(); 
 378:	0e 94 85 01 	call	0x30a	; 0x30a <RX>
	
	return address;	
}
 37c:	08 95       	ret

0000037e <Checksum_Check>:
char Checksum_Check(char adr)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	d8 2f       	mov	r29, r24
	char data=0;
	char checksum=0; 
	char checksum_C=0; 
	
	data = RX(); 
 384:	0e 94 85 01 	call	0x30a	; 0x30a <RX>
 388:	c8 2f       	mov	r28, r24
	checksum = RX(); 
 38a:	0e 94 85 01 	call	0x30a	; 0x30a <RX>
	
	UCSR0B = (0 << RXEN0);
 38e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//Packet_feedback();
	//_delay_ms(40);
		
	//} else
	
	if (checksum_C == checksum)
 392:	dc 0f       	add	r29, r28
 394:	d8 13       	cpse	r29, r24
 396:	02 c0       	rjmp	.+4      	; 0x39c <Checksum_Check+0x1e>
	return data;
 398:	8c 2f       	mov	r24, r28
 39a:	00 c0       	rjmp	.+0      	; 0x39c <Checksum_Check+0x1e>
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <main>:
char Pulse_Repo[] = {"NA"};
char BloodPD1[] = {"SBP Right (mmHg)>"};
char BloodPD2[] = {"SBP Left  (mmHg)>"};

int main(void)
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <main+0x6>
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 3ae:	8d ef       	ldi	r24, 0xFD	; 253
 3b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    /* Enable the ADC and LCD functions */
    i2c_init();
    USART ();
 3b4:	0e 94 77 01 	call	0x2ee	; 0x2ee <USART>
    int BP1= 0;
    int BP2= 0;
	char adr= 0;
	
	/* LCD Title Display */
	Intro(); 
 3b8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Intro>
    i2c_init();
    USART ();
    
    /*Variables*/
    int temp = 0;
    int BPM= 0;						//BPM calculation
 3bc:	c1 2c       	mov	r12, r1
 3be:	d1 2c       	mov	r13, r1
	Intro(); 
	
	/* START MAIN */
	for(;;)
	{
		UCSR0B = (1 << RXEN0);
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f1 ec       	ldi	r31, 0xC1	; 193
 3c4:	ef 2e       	mov	r14, r31
 3c6:	f1 2c       	mov	r15, r1
 3c8:	f0 2d       	mov	r31, r0
 3ca:	10 e1       	ldi	r17, 0x10	; 16
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3cc:	0f 2e       	mov	r0, r31
 3ce:	fc eb       	ldi	r31, 0xBC	; 188
 3d0:	af 2e       	mov	r10, r31
 3d2:	b1 2c       	mov	r11, r1
 3d4:	f0 2d       	mov	r31, r0
 3d6:	04 e9       	ldi	r16, 0x94	; 148
 3d8:	f7 01       	movw	r30, r14
 3da:	10 83       	st	Z, r17
		adr= Check_Packet(); 
 3dc:	0e 94 b8 01 	call	0x370	; 0x370 <Check_Packet>
		
		/* Heart Sensor *******************************************************/
		if (adr== BPMADDRESS)
 3e0:	81 33       	cpi	r24, 0x31	; 49
 3e2:	e9 f5       	brne	.+122    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		{
			BPM= Checksum_Check(adr); 
 3e4:	0e 94 bf 01 	call	0x37e	; 0x37e <Checksum_Check>
 3e8:	98 2e       	mov	r9, r24
 3ea:	c8 2e       	mov	r12, r24
 3ec:	d1 2c       	mov	r13, r1
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 3ee:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(BPM, LCD);
 3f0:	be 01       	movw	r22, r28
 3f2:	6f 5f       	subi	r22, 0xFF	; 255
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	c6 01       	movw	r24, r12
 3f8:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 3fc:	80 e5       	ldi	r24, 0x50	; 80
 3fe:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 402:	8f e0       	ldi	r24, 0x0F	; 15
 404:	97 e2       	ldi	r25, 0x27	; 39
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
			_delay_ms(40);
			LCD_1line(); 
 40e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_1line>
			end= 0x3E;
			Lookup (BPMD, end);
 412:	6e e3       	ldi	r22, 0x3E	; 62
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	86 e3       	ldi	r24, 0x36	; 54
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
			i2c_write(LCD[2]);
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]); 					
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]);
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 430:	f5 01       	movw	r30, r10
 432:	00 83       	st	Z, r16
			i2c_stop();
			
			if ((110<BPM) | (BPM>60))
 434:	fd e3       	ldi	r31, 0x3D	; 61
 436:	cf 16       	cp	r12, r31
 438:	d1 04       	cpc	r13, r1
 43a:	74 f2       	brlt	.-100    	; 0x3d8 <main+0x36>
 43c:	89 ef       	ldi	r24, 0xF9	; 249
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop
			{
				_delay_ms(1);
				Packet_Alarm(BPM, BPMADDRESS);
 448:	61 e3       	ldi	r22, 0x31	; 49
 44a:	89 2d       	mov	r24, r9
 44c:	0e 94 9b 01 	call	0x336	; 0x336 <Packet_Alarm>
 450:	ef e0       	ldi	r30, 0x0F	; 15
 452:	f7 e2       	ldi	r31, 0x27	; 39
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	bd cf       	rjmp	.-134    	; 0x3d8 <main+0x36>
				_delay_ms(40);
			}
			
		/* Temperature *******************************************************/
		} else if (adr== tempADDRESS)
 45e:	84 35       	cpi	r24, 0x54	; 84
 460:	e1 f5       	brne	.+120    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
		{
			temp= Checksum_Check(adr); 
 462:	0e 94 bf 01 	call	0x37e	; 0x37e <Checksum_Check>
 466:	98 2e       	mov	r9, r24
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 468:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(temp, LCD);
 46a:	be 01       	movw	r22, r28
 46c:	6f 5f       	subi	r22, 0xFF	; 255
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 476:	80 e5       	ldi	r24, 0x50	; 80
 478:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 47c:	8f e0       	ldi	r24, 0x0F	; 15
 47e:	97 e2       	ldi	r25, 0x27	; 39
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 486:	00 00       	nop
			_delay_ms(40);
			LCD_2line ();
 488:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_2line>
			end= 0x3E;
			Lookup (TempD, end);
 48c:	6e e3       	ldi	r22, 0x3E	; 62
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	84 e2       	ldi	r24, 0x24	; 36
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
			i2c_write(LCD[2]);
 498:	8b 81       	ldd	r24, Y+3	; 0x03
 49a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 4aa:	f5 01       	movw	r30, r10
 4ac:	00 83       	st	Z, r16
			i2c_stop();
			
			if ((38<BPM) | (BPM<36))
 4ae:	c6 01       	movw	r24, r12
 4b0:	84 97       	sbiw	r24, 0x24	; 36
 4b2:	03 97       	sbiw	r24, 0x03	; 3
 4b4:	08 f4       	brcc	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b6:	90 cf       	rjmp	.-224    	; 0x3d8 <main+0x36>
 4b8:	89 ef       	ldi	r24, 0xF9	; 249
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c2:	00 00       	nop
			{
				_delay_ms(1);
				Packet_Alarm(temp, tempADDRESS);
 4c4:	64 e5       	ldi	r22, 0x54	; 84
 4c6:	89 2d       	mov	r24, r9
 4c8:	0e 94 9b 01 	call	0x336	; 0x336 <Packet_Alarm>
 4cc:	ef e0       	ldi	r30, 0x0F	; 15
 4ce:	f7 e2       	ldi	r31, 0x27	; 39
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
 4d8:	7f cf       	rjmp	.-258    	; 0x3d8 <main+0x36>
				_delay_ms(40);
			}
		/* Temperature *******************************************************/
		} else if (adr== BP1ADDRESS)
 4da:	82 34       	cpi	r24, 0x42	; 66
 4dc:	31 f5       	brne	.+76     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
		{
			BP1= Checksum_Check(adr); 
 4de:	0e 94 bf 01 	call	0x37e	; 0x37e <Checksum_Check>
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 4e2:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(BP1, LCD);
 4e4:	be 01       	movw	r22, r28
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 4f0:	80 e5       	ldi	r24, 0x50	; 80
 4f2:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 4f6:	8f e0       	ldi	r24, 0x0F	; 15
 4f8:	97 e2       	ldi	r25, 0x27	; 39
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 500:	00 00       	nop
			_delay_ms(40);
			LCD_3line();
 502:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_3line>
			end= 0x3E;
			Lookup (BloodPD1, end);
 506:	6e e3       	ldi	r22, 0x3E	; 62
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	82 e1       	ldi	r24, 0x12	; 18
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
			i2c_write(LCD[2]); 
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]); 
 518:	8a 81       	ldd	r24, Y+2	; 0x02
 51a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]);
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 524:	f5 01       	movw	r30, r10
 526:	00 83       	st	Z, r16
 528:	57 cf       	rjmp	.-338    	; 0x3d8 <main+0x36>
			i2c_stop();
			
		/* Temperature *******************************************************/
		}	else if (adr== BP2ADDRESS)
 52a:	82 36       	cpi	r24, 0x62	; 98
 52c:	09 f0       	breq	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 52e:	54 cf       	rjmp	.-344    	; 0x3d8 <main+0x36>
		{
			BP2= Checksum_Check(adr); 
 530:	0e 94 bf 01 	call	0x37e	; 0x37e <Checksum_Check>
			
			/* Convert Decimal to hex for LCD */
			LCD[3]=0;
 534:	1c 82       	std	Y+4, r1	; 0x04
			Dec_Hex(BP2, LCD);
 536:	be 01       	movw	r22, r28
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 82 00 	call	0x104	; 0x104 <Dec_Hex>
			
			/* LCD temp Display */
			i2c_start(0x50);					// Comm with LCD address
 542:	80 e5       	ldi	r24, 0x50	; 80
 544:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 548:	8f e0       	ldi	r24, 0x0F	; 15
 54a:	97 e2       	ldi	r25, 0x27	; 39
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 550:	00 c0       	rjmp	.+0      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 552:	00 00       	nop
			_delay_ms(40);
			LCD_4line ();
 554:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_4line>
			end= 0x3E;
			Lookup (BloodPD2, end);
 558:	6e e3       	ldi	r22, 0x3E	; 62
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Lookup>
			i2c_write(LCD[2]); 
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[1]);
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
			i2c_write(LCD[0]); 
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 576:	f5 01       	movw	r30, r10
 578:	00 83       	st	Z, r16
 57a:	2e cf       	rjmp	.-420    	; 0x3d8 <main+0x36>

0000057c <__divmodhi4>:
 57c:	97 fb       	bst	r25, 7
 57e:	07 2e       	mov	r0, r23
 580:	16 f4       	brtc	.+4      	; 0x586 <__divmodhi4+0xa>
 582:	00 94       	com	r0
 584:	07 d0       	rcall	.+14     	; 0x594 <__divmodhi4_neg1>
 586:	77 fd       	sbrc	r23, 7
 588:	09 d0       	rcall	.+18     	; 0x59c <__divmodhi4_neg2>
 58a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__udivmodhi4>
 58e:	07 fc       	sbrc	r0, 7
 590:	05 d0       	rcall	.+10     	; 0x59c <__divmodhi4_neg2>
 592:	3e f4       	brtc	.+14     	; 0x5a2 <__divmodhi4_exit>

00000594 <__divmodhi4_neg1>:
 594:	90 95       	com	r25
 596:	81 95       	neg	r24
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__divmodhi4_neg2>:
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255

000005a2 <__divmodhi4_exit>:
 5a2:	08 95       	ret

000005a4 <__udivmodhi4>:
 5a4:	aa 1b       	sub	r26, r26
 5a6:	bb 1b       	sub	r27, r27
 5a8:	51 e1       	ldi	r21, 0x11	; 17
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <__udivmodhi4_ep>

000005ac <__udivmodhi4_loop>:
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	a6 17       	cp	r26, r22
 5b2:	b7 07       	cpc	r27, r23
 5b4:	10 f0       	brcs	.+4      	; 0x5ba <__udivmodhi4_ep>
 5b6:	a6 1b       	sub	r26, r22
 5b8:	b7 0b       	sbc	r27, r23

000005ba <__udivmodhi4_ep>:
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	5a 95       	dec	r21
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__udivmodhi4_loop>
 5c2:	80 95       	com	r24
 5c4:	90 95       	com	r25
 5c6:	bc 01       	movw	r22, r24
 5c8:	cd 01       	movw	r24, r26
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
