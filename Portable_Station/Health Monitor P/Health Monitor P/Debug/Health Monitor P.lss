
Health Monitor P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00000930  000009a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000930  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a44  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019e6  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f7  00000000  00000000  00002536  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ee  00000000  00000000  00002e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  0000381c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053b  00000000  00000000  00003aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000147d  00000000  00000000  00003fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00005464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 30 01 	call	0x260	; 0x260 <main>
  8e:	0c 94 96 04 	jmp	0x92c	; 0x92c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_start>:
}
int RX (void)
{
	while  ((UCSR0A & (1 << RXC0))==0);
	return (UDR0);
}
  96:	ec eb       	ldi	r30, 0xBC	; 188
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
  9c:	94 ea       	ldi	r25, 0xA4	; 164
  9e:	90 83       	st	Z, r25
  a0:	90 81       	ld	r25, Z
  a2:	99 23       	and	r25, r25
  a4:	ec f7       	brge	.-6      	; 0xa0 <i2c_start+0xa>
  a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	98 7f       	andi	r25, 0xF8	; 248
  ac:	98 30       	cpi	r25, 0x08	; 8
  ae:	a1 f4       	brne	.+40     	; 0xd8 <i2c_start+0x42>
  b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ba:	ec eb       	ldi	r30, 0xBC	; 188
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <i2c_start+0x28>
  c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	98 31       	cpi	r25, 0x18	; 24
  cc:	39 f0       	breq	.+14     	; 0xdc <i2c_start+0x46>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 34       	cpi	r25, 0x40	; 64
  d2:	29 f4       	brne	.+10     	; 0xde <i2c_start+0x48>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret

000000e0 <i2c_write>:
  e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <i2c_write+0xe>
  f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	98 32       	cpi	r25, 0x28	; 40
  fe:	09 f4       	brne	.+2      	; 0x102 <i2c_write+0x22>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret

00000104 <ADC_init>:
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 10a:	87 e8       	ldi	r24, 0x87	; 135
 10c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 110:	08 95       	ret

00000112 <Dec_Hex>:
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	9c 01       	movw	r18, r24
 118:	fb 01       	movw	r30, r22
 11a:	64 e6       	ldi	r22, 0x64	; 100
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divmodhi4>
 122:	8b 01       	movw	r16, r22
 124:	4c e9       	ldi	r20, 0x9C	; 156
 126:	46 03       	mulsu	r20, r22
 128:	c0 01       	movw	r24, r0
 12a:	47 9f       	mul	r20, r23
 12c:	90 0d       	add	r25, r0
 12e:	11 24       	eor	r1, r1
 130:	82 0f       	add	r24, r18
 132:	93 1f       	adc	r25, r19
 134:	6a e0       	ldi	r22, 0x0A	; 10
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divmodhi4>
 13c:	c8 01       	movw	r24, r16
 13e:	c0 96       	adiw	r24, 0x30	; 48
 140:	95 83       	std	Z+5, r25	; 0x05
 142:	84 83       	std	Z+4, r24	; 0x04
 144:	cb 01       	movw	r24, r22
 146:	c0 96       	adiw	r24, 0x30	; 48
 148:	93 83       	std	Z+3, r25	; 0x03
 14a:	82 83       	std	Z+2, r24	; 0x02
 14c:	44 e6       	ldi	r20, 0x64	; 100
 14e:	40 9f       	mul	r20, r16
 150:	c0 01       	movw	r24, r0
 152:	41 9f       	mul	r20, r17
 154:	90 0d       	add	r25, r0
 156:	11 24       	eor	r1, r1
 158:	ab 01       	movw	r20, r22
 15a:	44 0f       	add	r20, r20
 15c:	55 1f       	adc	r21, r21
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	64 0f       	add	r22, r20
 16c:	75 1f       	adc	r23, r21
 16e:	68 0f       	add	r22, r24
 170:	79 1f       	adc	r23, r25
 172:	26 1b       	sub	r18, r22
 174:	37 0b       	sbc	r19, r23
 176:	20 5d       	subi	r18, 0xD0	; 208
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	31 83       	std	Z+1, r19	; 0x01
 17c:	20 83       	st	Z, r18
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <LCD_Clear>:
 184:	8e ef       	ldi	r24, 0xFE	; 254
 186:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 18a:	81 e5       	ldi	r24, 0x51	; 81
 18c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 190:	08 95       	ret

00000192 <LCD_2line>:
 192:	8e ef       	ldi	r24, 0xFE	; 254
 194:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 198:	85 e4       	ldi	r24, 0x45	; 69
 19a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1a4:	08 95       	ret

000001a6 <Lookup>:
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	61 15       	cp	r22, r1
 1b2:	71 05       	cpc	r23, r1
 1b4:	a1 f0       	breq	.+40     	; 0x1de <Lookup+0x38>
 1b6:	7b 01       	movw	r14, r22
 1b8:	08 2f       	mov	r16, r24
 1ba:	19 2f       	mov	r17, r25
 1bc:	f8 01       	movw	r30, r16
 1be:	c1 91       	ld	r28, Z+
 1c0:	8f 01       	movw	r16, r30
 1c2:	8c 2f       	mov	r24, r28
 1c4:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1c8:	83 ec       	ldi	r24, 0xC3	; 195
 1ca:	99 e0       	ldi	r25, 0x09	; 9
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <Lookup+0x26>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <Lookup+0x2c>
 1d2:	00 00       	nop
 1d4:	8c 2f       	mov	r24, r28
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	e8 16       	cp	r14, r24
 1da:	f9 06       	cpc	r15, r25
 1dc:	79 f7       	brne	.-34     	; 0x1bc <Lookup+0x16>
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	08 95       	ret

000001ea <USART>:
 1ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1ee:	83 e3       	ldi	r24, 0x33	; 51
 1f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1f4:	e0 ec       	ldi	r30, 0xC0	; 192
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	80 83       	st	Z, r24
 1fe:	8e e0       	ldi	r24, 0x0E	; 14
 200:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 204:	08 95       	ret

00000206 <TX>:

void TX (char TX_Data)
{
	PORTD |= _BV(SYNC_P);
 206:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 208:	00 00       	nop
	_delay_us(1);
	PORTD &= ~_BV(SYNC_P);	
 20a:	5f 98       	cbi	0x0b, 7	; 11
	
	//Enable Transmitter
	UCSR0B = (1 << TXEN0);
 20c:	98 e0       	ldi	r25, 0x08	; 8
 20e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//Wait until the Transmitter is ready
	while (! (UCSR0A & (1 << UDRE0)) );
 212:	e0 ec       	ldi	r30, 0xC0	; 192
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	90 81       	ld	r25, Z
 218:	95 ff       	sbrs	r25, 5
 21a:	fd cf       	rjmp	.-6      	; 0x216 <TX+0x10>
	//Send Data
	UDR0 = TX_Data;
 21c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	//Disable Transmitter
	UCSR0B = (0 << TXEN0);
 220:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 224:	08 95       	ret

00000226 <Packet>:
	return;
}

//********************************************** Frame Loop 
void Packet (char data, char address)
{ 
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	c8 2f       	mov	r28, r24
 22c:	d6 2f       	mov	r29, r22
	char checksum=0; 
	
	TX(PREAMBLE);
 22e:	80 e4       	ldi	r24, 0x40	; 64
 230:	0e 94 03 01 	call	0x206	; 0x206 <TX>
	TX(PREAMBLE);
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	0e 94 03 01 	call	0x206	; 0x206 <TX>
	TX(PREAMBLE);
 23a:	80 e4       	ldi	r24, 0x40	; 64
 23c:	0e 94 03 01 	call	0x206	; 0x206 <TX>
	TX(KEYWORD);
 240:	87 e3       	ldi	r24, 0x37	; 55
 242:	0e 94 03 01 	call	0x206	; 0x206 <TX>
	TX(address); 
 246:	8d 2f       	mov	r24, r29
 248:	0e 94 03 01 	call	0x206	; 0x206 <TX>
	TX(data);
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 03 01 	call	0x206	; 0x206 <TX>
	checksum= address+data;
	TX(checksum);
 252:	8d 2f       	mov	r24, r29
 254:	8c 0f       	add	r24, r28
 256:	0e 94 03 01 	call	0x206	; 0x206 <TX>
	
	return;
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <main>:
char Title[] = {"   Welcome to NAD!"};
char Title1[] = {"    by Amilya DD."};

//**************************************************
int main(void) 
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	00 d0       	rcall	.+0      	; 0x266 <main+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <main+0x8>
 268:	00 d0       	rcall	.+0      	; 0x26a <main+0xa>
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	/* Enable the ADC and LCD functions */
	ADC_init();
 26e:	0e 94 82 00 	call	0x104	; 0x104 <ADC_init>
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 272:	8d ef       	ldi	r24, 0xFD	; 253
 274:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	i2c_init();
	USART ();
 278:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART>
	
	/* Set the Ports as an output or input. */
	DDRB  |= _BV(LED_PIN);			//Output
 27c:	20 9a       	sbi	0x04, 0	; 4
	DDRD  |= _BV(SYNC_P);		   //Output
 27e:	57 9a       	sbi	0x0a, 7	; 10
	int BP2= 0;
	int packet_cnt=0; 
	 
	
	/* LCD Title Display */
	i2c_start(0x50);				// Comm with LCD address
 280:	80 e5       	ldi	r24, 0x50	; 80
 282:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	2f e7       	ldi	r18, 0x7F	; 127
 288:	88 e3       	ldi	r24, 0x38	; 56
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x2c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x36>
 296:	00 00       	nop
	_delay_ms(400);
	LCD_Clear ();
 298:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_Clear>
	end= 0x21;
	Lookup (Title, end );
 29c:	61 e2       	ldi	r22, 0x21	; 33
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	82 e1       	ldi	r24, 0x12	; 18
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lookup>
 2a8:	ef e0       	ldi	r30, 0x0F	; 15
 2aa:	f7 e2       	ldi	r31, 0x27	; 39
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x4c>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x52>
 2b2:	00 00       	nop
	_delay_ms(40);
	LCD_2line ();
 2b4:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_2line>
	end= 0x2E;
	Lookup (Title1, end );
 2b8:	6e e2       	ldi	r22, 0x2E	; 46
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lookup>
 2c4:	ff ef       	ldi	r31, 0xFF	; 255
 2c6:	24 e3       	ldi	r18, 0x34	; 52
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	f1 50       	subi	r31, 0x01	; 1
 2cc:	20 40       	sbci	r18, 0x00	; 0
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x6a>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x74>
 2d4:	00 00       	nop
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2d6:	84 e9       	ldi	r24, 0x94	; 148
 2d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	DDRB  |= _BV(LED_PIN);			//Output
	DDRD  |= _BV(SYNC_P);		   //Output
	
	/*Variables*/
	int pulse = 0;
	float temp = 0;
 2dc:	f1 2c       	mov	r15, r1
 2de:	e1 2c       	mov	r14, r1
 2e0:	d1 2c       	mov	r13, r1
 2e2:	c1 2c       	mov	r12, r1
		} while (Tcnt < 11);					//Count period 10 times
		
		BPM= (60 * (1/(avgcnt/1400)));			//BPM Calculations
			
		/* Convert Decimal to hex for LCD */
		BPM++;
 2e4:	01 e0       	ldi	r16, 0x01	; 1
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	0f 2e       	mov	r0, r31
 2ea:	fc eb       	ldi	r31, 0xBC	; 188
 2ec:	af 2e       	mov	r10, r31
 2ee:	b1 2c       	mov	r11, r1
 2f0:	f0 2d       	mov	r31, r0
 2f2:	0f 2e       	mov	r0, r31
 2f4:	f4 e9       	ldi	r31, 0x94	; 148
 2f6:	9f 2e       	mov	r9, r31
 2f8:	f0 2d       	mov	r31, r0
		//''temp = ADC_read(ADC_PIN1);			//Check temperature
		temp = (temp -102)/2;
		
		temp++; 
		if (temp == 45)
		temp=0;
 2fa:	81 2c       	mov	r8, r1
 2fc:	71 2c       	mov	r7, r1
 2fe:	61 2c       	mov	r6, r1
 300:	51 2c       	mov	r5, r1
 302:	02 c0       	rjmp	.+4      	; 0x308 <main+0xa8>
		BPM= (60 * (1/(avgcnt/1400)));			//BPM Calculations
			
		/* Convert Decimal to hex for LCD */
		BPM++;
		if (BPM == 180)
		BPM=0;
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
		LCD[3]=0;
 308:	18 86       	std	Y+8, r1	; 0x08
 30a:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(BPM, LCD);
 30c:	be 01       	movw	r22, r28
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	c8 01       	movw	r24, r16
 314:	0e 94 89 00 	call	0x112	; 0x112 <Dec_Hex>
		
		/* LCD BPM Display */
		i2c_start(0x50);						// Comm with LCD 0Faddress
 318:	80 e5       	ldi	r24, 0x50	; 80
 31a:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 31e:	ef e0       	ldi	r30, 0x0F	; 15
 320:	f7 e2       	ldi	r31, 0x27	; 39
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0xc2>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0xc8>
 328:	00 00       	nop
		_delay_ms(40);
		LCD_Clear();
 32a:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_Clear>
		end= 0x3E;
		Lookup (BPMD, end);
 32e:	6e e3       	ldi	r22, 0x3E	; 62
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	8b e5       	ldi	r24, 0x5B	; 91
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lookup>
		//	Lookup (Pulse_Repo, end);
		//	_delay_ms(40);
		//	i2c_stop();
		//} else
		//{
			i2c_write(LCD[2]);
 33a:	8d 81       	ldd	r24, Y+5	; 0x05
 33c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 340:	83 ec       	ldi	r24, 0xC3	; 195
 342:	99 e0       	ldi	r25, 0x09	; 9
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0xe4>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0xea>
 34a:	00 00       	nop
			_delay_ms(10);
			i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 352:	e3 ec       	ldi	r30, 0xC3	; 195
 354:	f9 e0       	ldi	r31, 0x09	; 9
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0xf6>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0xfc>
 35c:	00 00       	nop
			_delay_ms(10);
			i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 364:	ff e3       	ldi	r31, 0x3F	; 63
 366:	2d e0       	ldi	r18, 0x0D	; 13
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	f1 50       	subi	r31, 0x01	; 1
 36c:	20 40       	sbci	r18, 0x00	; 0
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <main+0x10a>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x114>
 374:	00 00       	nop
 376:	f5 01       	movw	r30, r10
 378:	90 82       	st	Z, r9
 37a:	89 ef       	ldi	r24, 0xF9	; 249
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <main+0x11e>
 382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x124>
 384:	00 00       	nop
	
		/* Transmit Frame */
		//while (packet_cnt==3)
		//{
			_delay_ms(1);
			Packet(BPM, BPMADDRESS);
 386:	61 e3       	ldi	r22, 0x31	; 49
 388:	80 2f       	mov	r24, r16
 38a:	0e 94 13 01 	call	0x226	; 0x226 <Packet>
 38e:	ef e0       	ldi	r30, 0x0F	; 15
 390:	f7 e2       	ldi	r31, 0x27	; 39
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x132>
 396:	00 c0       	rjmp	.+0      	; 0x398 <main+0x138>
 398:	00 00       	nop
		//}
		//	packet_cnt=0; 
									
		/* Temperature Sensor *************************************************/
		//''temp = ADC_read(ADC_PIN1);			//Check temperature
		temp = (temp -102)/2;
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	4c ec       	ldi	r20, 0xCC	; 204
 3a0:	52 e4       	ldi	r21, 0x42	; 66
 3a2:	6f 2d       	mov	r22, r15
 3a4:	7e 2d       	mov	r23, r14
 3a6:	8d 2d       	mov	r24, r13
 3a8:	9c 2d       	mov	r25, r12
 3aa:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__subsf3>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	5f e3       	ldi	r21, 0x3F	; 63
 3b6:	0e 94 01 04 	call	0x802	; 0x802 <__mulsf3>
		
		temp++; 
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e8       	ldi	r20, 0x80	; 128
 3c0:	5f e3       	ldi	r21, 0x3F	; 63
 3c2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__addsf3>
 3c6:	f6 2e       	mov	r15, r22
 3c8:	e7 2e       	mov	r14, r23
 3ca:	d8 2e       	mov	r13, r24
 3cc:	c9 2e       	mov	r12, r25
		if (temp == 45)
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	44 e3       	ldi	r20, 0x34	; 52
 3d4:	52 e4       	ldi	r21, 0x42	; 66
 3d6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__cmpsf2>
 3da:	81 11       	cpse	r24, r1
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <main+0x186>
		temp=0;
 3de:	f8 2c       	mov	r15, r8
 3e0:	e7 2c       	mov	r14, r7
 3e2:	d6 2c       	mov	r13, r6
 3e4:	c5 2c       	mov	r12, r5
	
		
		/* Convert Decimal to hex for LCD */
		LCD[3]=0;
 3e6:	18 86       	std	Y+8, r1	; 0x08
 3e8:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(temp, LCD);
 3ea:	6f 2d       	mov	r22, r15
 3ec:	7e 2d       	mov	r23, r14
 3ee:	8d 2d       	mov	r24, r13
 3f0:	9c 2d       	mov	r25, r12
 3f2:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fixsfsi>
 3f6:	dc 01       	movw	r26, r24
 3f8:	cb 01       	movw	r24, r22
 3fa:	be 01       	movw	r22, r28
 3fc:	6f 5f       	subi	r22, 0xFF	; 255
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	0e 94 89 00 	call	0x112	; 0x112 <Dec_Hex>
			
		/* LCD temp Display */
		i2c_start(0x50);					// Comm with LCD address
 404:	80 e5       	ldi	r24, 0x50	; 80
 406:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 40a:	8f e0       	ldi	r24, 0x0F	; 15
 40c:	97 e2       	ldi	r25, 0x27	; 39
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
		_delay_ms(40);
		LCD_2line ();
 416:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_2line>
		end= 0x3E;
		Lookup (TempD, end);
 41a:	6e e3       	ldi	r22, 0x3E	; 62
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	89 e4       	ldi	r24, 0x49	; 73
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lookup>
		i2c_write(LCD[2]);
 426:	8d 81       	ldd	r24, Y+5	; 0x05
 428:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 42c:	e3 ec       	ldi	r30, 0xC3	; 195
 42e:	f9 e0       	ldi	r31, 0x09	; 9
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 43e:	83 ec       	ldi	r24, 0xC3	; 195
 440:	99 e0       	ldi	r25, 0x09	; 9
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 448:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 450:	9f e3       	ldi	r25, 0x3F	; 63
 452:	ed e0       	ldi	r30, 0x0D	; 13
 454:	f3 e0       	ldi	r31, 0x03	; 3
 456:	91 50       	subi	r25, 0x01	; 1
 458:	e0 40       	sbci	r30, 0x00	; 0
 45a:	f0 40       	sbci	r31, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 460:	00 00       	nop
 462:	f5 01       	movw	r30, r10
 464:	90 82       	st	Z, r9
 466:	89 ef       	ldi	r24, 0xF9	; 249
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop

		/* Transmit Frame */
		//while (packet_cnt==3)
		//{
			_delay_ms(1);
			Packet(temp, tempADDRESS);
 472:	6f 2d       	mov	r22, r15
 474:	7e 2d       	mov	r23, r14
 476:	8d 2d       	mov	r24, r13
 478:	9c 2d       	mov	r25, r12
 47a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fixunssfsi>
 47e:	86 2f       	mov	r24, r22
 480:	62 e3       	ldi	r22, 0x32	; 50
 482:	0e 94 13 01 	call	0x226	; 0x226 <Packet>
 486:	ef e0       	ldi	r30, 0x0F	; 15
 488:	f7 e2       	ldi	r31, 0x27	; 39
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 490:	00 00       	nop
		
		BP1= 0.325*(avgcnt/10)+122.35;			//BPM Calculations
			
		/* Convert Decimal to hex for LCD */
		BP1= 132; 
		LCD[3]=0;
 492:	18 86       	std	Y+8, r1	; 0x08
 494:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(BP1, LCD);
 496:	be 01       	movw	r22, r28
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	84 e8       	ldi	r24, 0x84	; 132
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 89 00 	call	0x112	; 0x112 <Dec_Hex>
		
		/* LCD temp Display */
		i2c_start(0x50);					// Comm with LCD address
 4a4:	80 e5       	ldi	r24, 0x50	; 80
 4a6:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 4aa:	8f e0       	ldi	r24, 0x0F	; 15
 4ac:	97 e2       	ldi	r25, 0x27	; 39
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b4:	00 00       	nop
		_delay_ms(40);
		LCD_Clear ();
 4b6:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_Clear>
		end= 0x3E;
		Lookup (BloodPD1, end);
 4ba:	6e e3       	ldi	r22, 0x3E	; 62
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	87 e3       	ldi	r24, 0x37	; 55
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lookup>
		i2c_write(LCD[2]);
 4c6:	8d 81       	ldd	r24, Y+5	; 0x05
 4c8:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 4cc:	e3 ec       	ldi	r30, 0xC3	; 195
 4ce:	f9 e0       	ldi	r31, 0x09	; 9
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 4de:	83 ec       	ldi	r24, 0xC3	; 195
 4e0:	99 e0       	ldi	r25, 0x09	; 9
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e8:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 4f0:	9f e3       	ldi	r25, 0x3F	; 63
 4f2:	ed e0       	ldi	r30, 0x0D	; 13
 4f4:	f3 e0       	ldi	r31, 0x03	; 3
 4f6:	91 50       	subi	r25, 0x01	; 1
 4f8:	e0 40       	sbci	r30, 0x00	; 0
 4fa:	f0 40       	sbci	r31, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 500:	00 00       	nop
 502:	f5 01       	movw	r30, r10
 504:	90 82       	st	Z, r9
 506:	89 ef       	ldi	r24, 0xF9	; 249
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 510:	00 00       	nop
		
		/* Transmit Frame */
		//while (packet_cnt==3)
		//{
			_delay_ms(1);
			Packet(BP1, BP1ADDRESS);
 512:	63 e3       	ldi	r22, 0x33	; 51
 514:	84 e8       	ldi	r24, 0x84	; 132
 516:	0e 94 13 01 	call	0x226	; 0x226 <Packet>
 51a:	ef e0       	ldi	r30, 0x0F	; 15
 51c:	f7 e2       	ldi	r31, 0x27	; 39
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 522:	00 c0       	rjmp	.+0      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 524:	00 00       	nop
		
		//BP2= 0.325*(avgcnt/10)+122.35;			//BPM Calculations
		
		/* Convert Decimal to hex for LCD */
		BP2= 130;
		LCD[3]=0;
 526:	18 86       	std	Y+8, r1	; 0x08
 528:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(BP2, LCD);
 52a:	be 01       	movw	r22, r28
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	82 e8       	ldi	r24, 0x82	; 130
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 89 00 	call	0x112	; 0x112 <Dec_Hex>
		
		/* LCD temp Display */
		i2c_start(0x50);					// Comm with LCD address
 538:	80 e5       	ldi	r24, 0x50	; 80
 53a:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 53e:	8f e0       	ldi	r24, 0x0F	; 15
 540:	97 e2       	ldi	r25, 0x27	; 39
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 546:	00 c0       	rjmp	.+0      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 548:	00 00       	nop
		_delay_ms(40);
		LCD_2line ();
 54a:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_2line>
		end= 0x3E;
		Lookup (BloodPD2, end);
 54e:	6e e3       	ldi	r22, 0x3E	; 62
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	85 e2       	ldi	r24, 0x25	; 37
 554:	91 e0       	ldi	r25, 0x01	; 1
 556:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lookup>
		i2c_write(LCD[2]);
 55a:	8d 81       	ldd	r24, Y+5	; 0x05
 55c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 560:	e3 ec       	ldi	r30, 0xC3	; 195
 562:	f9 e0       	ldi	r31, 0x09	; 9
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 568:	00 c0       	rjmp	.+0      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 56a:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 56c:	8b 81       	ldd	r24, Y+3	; 0x03
 56e:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 572:	83 ec       	ldi	r24, 0xC3	; 195
 574:	99 e0       	ldi	r25, 0x09	; 9
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	f1 f7       	brne	.-4      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57c:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 584:	9f e3       	ldi	r25, 0x3F	; 63
 586:	ed e0       	ldi	r30, 0x0D	; 13
 588:	f3 e0       	ldi	r31, 0x03	; 3
 58a:	91 50       	subi	r25, 0x01	; 1
 58c:	e0 40       	sbci	r30, 0x00	; 0
 58e:	f0 40       	sbci	r31, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 592:	00 c0       	rjmp	.+0      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 594:	00 00       	nop
 596:	f5 01       	movw	r30, r10
 598:	90 82       	st	Z, r9
 59a:	89 ef       	ldi	r24, 0xF9	; 249
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 5a4:	00 00       	nop
		
		/* Transmit Frame */
	//	while (packet_cnt==3)
	//	{
			_delay_ms(1);
			Packet(BP2, BP2ADDRESS);
 5a6:	64 e3       	ldi	r22, 0x34	; 52
 5a8:	82 e8       	ldi	r24, 0x82	; 130
 5aa:	0e 94 13 01 	call	0x226	; 0x226 <Packet>
 5ae:	ef e0       	ldi	r30, 0x0F	; 15
 5b0:	f7 e2       	ldi	r31, 0x27	; 39
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b8:	00 00       	nop
		} while (Tcnt < 11);					//Count period 10 times
		
		BPM= (60 * (1/(avgcnt/1400)));			//BPM Calculations
			
		/* Convert Decimal to hex for LCD */
		BPM++;
 5ba:	0f 5f       	subi	r16, 0xFF	; 255
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
		if (BPM == 180)
 5be:	04 3b       	cpi	r16, 0xB4	; 180
 5c0:	11 05       	cpc	r17, r1
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5c4:	a1 ce       	rjmp	.-702    	; 0x308 <main+0xa8>
 5c6:	9e ce       	rjmp	.-708    	; 0x304 <main+0xa4>

000005c8 <__subsf3>:
 5c8:	50 58       	subi	r21, 0x80	; 128

000005ca <__addsf3>:
 5ca:	bb 27       	eor	r27, r27
 5cc:	aa 27       	eor	r26, r26
 5ce:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__addsf3x>
 5d2:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_round>
 5d6:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscA>
 5da:	38 f0       	brcs	.+14     	; 0x5ea <__addsf3+0x20>
 5dc:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_pscB>
 5e0:	20 f0       	brcs	.+8      	; 0x5ea <__addsf3+0x20>
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <__addsf3+0x28>
 5e4:	9f 3f       	cpi	r25, 0xFF	; 255
 5e6:	19 f4       	brne	.+6      	; 0x5ee <__addsf3+0x24>
 5e8:	26 f4       	brtc	.+8      	; 0x5f2 <__addsf3+0x28>
 5ea:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_nan>
 5ee:	0e f4       	brtc	.+2      	; 0x5f2 <__addsf3+0x28>
 5f0:	e0 95       	com	r30
 5f2:	e7 fb       	bst	r30, 7
 5f4:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>

000005f8 <__addsf3x>:
 5f8:	e9 2f       	mov	r30, r25
 5fa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_split3>
 5fe:	58 f3       	brcs	.-42     	; 0x5d6 <__addsf3+0xc>
 600:	ba 17       	cp	r27, r26
 602:	62 07       	cpc	r22, r18
 604:	73 07       	cpc	r23, r19
 606:	84 07       	cpc	r24, r20
 608:	95 07       	cpc	r25, r21
 60a:	20 f0       	brcs	.+8      	; 0x614 <__addsf3x+0x1c>
 60c:	79 f4       	brne	.+30     	; 0x62c <__addsf3x+0x34>
 60e:	a6 f5       	brtc	.+104    	; 0x678 <__addsf3x+0x80>
 610:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_zero>
 614:	0e f4       	brtc	.+2      	; 0x618 <__addsf3x+0x20>
 616:	e0 95       	com	r30
 618:	0b 2e       	mov	r0, r27
 61a:	ba 2f       	mov	r27, r26
 61c:	a0 2d       	mov	r26, r0
 61e:	0b 01       	movw	r0, r22
 620:	b9 01       	movw	r22, r18
 622:	90 01       	movw	r18, r0
 624:	0c 01       	movw	r0, r24
 626:	ca 01       	movw	r24, r20
 628:	a0 01       	movw	r20, r0
 62a:	11 24       	eor	r1, r1
 62c:	ff 27       	eor	r31, r31
 62e:	59 1b       	sub	r21, r25
 630:	99 f0       	breq	.+38     	; 0x658 <__addsf3x+0x60>
 632:	59 3f       	cpi	r21, 0xF9	; 249
 634:	50 f4       	brcc	.+20     	; 0x64a <__addsf3x+0x52>
 636:	50 3e       	cpi	r21, 0xE0	; 224
 638:	68 f1       	brcs	.+90     	; 0x694 <__addsf3x+0x9c>
 63a:	1a 16       	cp	r1, r26
 63c:	f0 40       	sbci	r31, 0x00	; 0
 63e:	a2 2f       	mov	r26, r18
 640:	23 2f       	mov	r18, r19
 642:	34 2f       	mov	r19, r20
 644:	44 27       	eor	r20, r20
 646:	58 5f       	subi	r21, 0xF8	; 248
 648:	f3 cf       	rjmp	.-26     	; 0x630 <__addsf3x+0x38>
 64a:	46 95       	lsr	r20
 64c:	37 95       	ror	r19
 64e:	27 95       	ror	r18
 650:	a7 95       	ror	r26
 652:	f0 40       	sbci	r31, 0x00	; 0
 654:	53 95       	inc	r21
 656:	c9 f7       	brne	.-14     	; 0x64a <__addsf3x+0x52>
 658:	7e f4       	brtc	.+30     	; 0x678 <__addsf3x+0x80>
 65a:	1f 16       	cp	r1, r31
 65c:	ba 0b       	sbc	r27, r26
 65e:	62 0b       	sbc	r22, r18
 660:	73 0b       	sbc	r23, r19
 662:	84 0b       	sbc	r24, r20
 664:	ba f0       	brmi	.+46     	; 0x694 <__addsf3x+0x9c>
 666:	91 50       	subi	r25, 0x01	; 1
 668:	a1 f0       	breq	.+40     	; 0x692 <__addsf3x+0x9a>
 66a:	ff 0f       	add	r31, r31
 66c:	bb 1f       	adc	r27, r27
 66e:	66 1f       	adc	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	c2 f7       	brpl	.-16     	; 0x666 <__addsf3x+0x6e>
 676:	0e c0       	rjmp	.+28     	; 0x694 <__addsf3x+0x9c>
 678:	ba 0f       	add	r27, r26
 67a:	62 1f       	adc	r22, r18
 67c:	73 1f       	adc	r23, r19
 67e:	84 1f       	adc	r24, r20
 680:	48 f4       	brcc	.+18     	; 0x694 <__addsf3x+0x9c>
 682:	87 95       	ror	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	f7 95       	ror	r31
 68c:	9e 3f       	cpi	r25, 0xFE	; 254
 68e:	08 f0       	brcs	.+2      	; 0x692 <__addsf3x+0x9a>
 690:	b0 cf       	rjmp	.-160    	; 0x5f2 <__addsf3+0x28>
 692:	93 95       	inc	r25
 694:	88 0f       	add	r24, r24
 696:	08 f0       	brcs	.+2      	; 0x69a <__addsf3x+0xa2>
 698:	99 27       	eor	r25, r25
 69a:	ee 0f       	add	r30, r30
 69c:	97 95       	ror	r25
 69e:	87 95       	ror	r24
 6a0:	08 95       	ret

000006a2 <__cmpsf2>:
 6a2:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_cmp>
 6a6:	08 f4       	brcc	.+2      	; 0x6aa <__cmpsf2+0x8>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	08 95       	ret

000006ac <__fixsfsi>:
 6ac:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fixunssfsi>
 6b0:	68 94       	set
 6b2:	b1 11       	cpse	r27, r1
 6b4:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_szero>
 6b8:	08 95       	ret

000006ba <__fixunssfsi>:
 6ba:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__fp_splitA>
 6be:	88 f0       	brcs	.+34     	; 0x6e2 <__fixunssfsi+0x28>
 6c0:	9f 57       	subi	r25, 0x7F	; 127
 6c2:	98 f0       	brcs	.+38     	; 0x6ea <__fixunssfsi+0x30>
 6c4:	b9 2f       	mov	r27, r25
 6c6:	99 27       	eor	r25, r25
 6c8:	b7 51       	subi	r27, 0x17	; 23
 6ca:	b0 f0       	brcs	.+44     	; 0x6f8 <__fixunssfsi+0x3e>
 6cc:	e1 f0       	breq	.+56     	; 0x706 <__fixunssfsi+0x4c>
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	1a f0       	brmi	.+6      	; 0x6de <__fixunssfsi+0x24>
 6d8:	ba 95       	dec	r27
 6da:	c9 f7       	brne	.-14     	; 0x6ce <__fixunssfsi+0x14>
 6dc:	14 c0       	rjmp	.+40     	; 0x706 <__fixunssfsi+0x4c>
 6de:	b1 30       	cpi	r27, 0x01	; 1
 6e0:	91 f0       	breq	.+36     	; 0x706 <__fixunssfsi+0x4c>
 6e2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__fp_zero>
 6e6:	b1 e0       	ldi	r27, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_zero>
 6ee:	67 2f       	mov	r22, r23
 6f0:	78 2f       	mov	r23, r24
 6f2:	88 27       	eor	r24, r24
 6f4:	b8 5f       	subi	r27, 0xF8	; 248
 6f6:	39 f0       	breq	.+14     	; 0x706 <__fixunssfsi+0x4c>
 6f8:	b9 3f       	cpi	r27, 0xF9	; 249
 6fa:	cc f3       	brlt	.-14     	; 0x6ee <__fixunssfsi+0x34>
 6fc:	86 95       	lsr	r24
 6fe:	77 95       	ror	r23
 700:	67 95       	ror	r22
 702:	b3 95       	inc	r27
 704:	d9 f7       	brne	.-10     	; 0x6fc <__fixunssfsi+0x42>
 706:	3e f4       	brtc	.+14     	; 0x716 <__fixunssfsi+0x5c>
 708:	90 95       	com	r25
 70a:	80 95       	com	r24
 70c:	70 95       	com	r23
 70e:	61 95       	neg	r22
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__fp_cmp>:
 718:	99 0f       	add	r25, r25
 71a:	00 08       	sbc	r0, r0
 71c:	55 0f       	add	r21, r21
 71e:	aa 0b       	sbc	r26, r26
 720:	e0 e8       	ldi	r30, 0x80	; 128
 722:	fe ef       	ldi	r31, 0xFE	; 254
 724:	16 16       	cp	r1, r22
 726:	17 06       	cpc	r1, r23
 728:	e8 07       	cpc	r30, r24
 72a:	f9 07       	cpc	r31, r25
 72c:	c0 f0       	brcs	.+48     	; 0x75e <__fp_cmp+0x46>
 72e:	12 16       	cp	r1, r18
 730:	13 06       	cpc	r1, r19
 732:	e4 07       	cpc	r30, r20
 734:	f5 07       	cpc	r31, r21
 736:	98 f0       	brcs	.+38     	; 0x75e <__fp_cmp+0x46>
 738:	62 1b       	sub	r22, r18
 73a:	73 0b       	sbc	r23, r19
 73c:	84 0b       	sbc	r24, r20
 73e:	95 0b       	sbc	r25, r21
 740:	39 f4       	brne	.+14     	; 0x750 <__fp_cmp+0x38>
 742:	0a 26       	eor	r0, r26
 744:	61 f0       	breq	.+24     	; 0x75e <__fp_cmp+0x46>
 746:	23 2b       	or	r18, r19
 748:	24 2b       	or	r18, r20
 74a:	25 2b       	or	r18, r21
 74c:	21 f4       	brne	.+8      	; 0x756 <__fp_cmp+0x3e>
 74e:	08 95       	ret
 750:	0a 26       	eor	r0, r26
 752:	09 f4       	brne	.+2      	; 0x756 <__fp_cmp+0x3e>
 754:	a1 40       	sbci	r26, 0x01	; 1
 756:	a6 95       	lsr	r26
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	81 1d       	adc	r24, r1
 75c:	81 1d       	adc	r24, r1
 75e:	08 95       	ret

00000760 <__fp_inf>:
 760:	97 f9       	bld	r25, 7
 762:	9f 67       	ori	r25, 0x7F	; 127
 764:	80 e8       	ldi	r24, 0x80	; 128
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	08 95       	ret

0000076c <__fp_nan>:
 76c:	9f ef       	ldi	r25, 0xFF	; 255
 76e:	80 ec       	ldi	r24, 0xC0	; 192
 770:	08 95       	ret

00000772 <__fp_pscA>:
 772:	00 24       	eor	r0, r0
 774:	0a 94       	dec	r0
 776:	16 16       	cp	r1, r22
 778:	17 06       	cpc	r1, r23
 77a:	18 06       	cpc	r1, r24
 77c:	09 06       	cpc	r0, r25
 77e:	08 95       	ret

00000780 <__fp_pscB>:
 780:	00 24       	eor	r0, r0
 782:	0a 94       	dec	r0
 784:	12 16       	cp	r1, r18
 786:	13 06       	cpc	r1, r19
 788:	14 06       	cpc	r1, r20
 78a:	05 06       	cpc	r0, r21
 78c:	08 95       	ret

0000078e <__fp_round>:
 78e:	09 2e       	mov	r0, r25
 790:	03 94       	inc	r0
 792:	00 0c       	add	r0, r0
 794:	11 f4       	brne	.+4      	; 0x79a <__fp_round+0xc>
 796:	88 23       	and	r24, r24
 798:	52 f0       	brmi	.+20     	; 0x7ae <__fp_round+0x20>
 79a:	bb 0f       	add	r27, r27
 79c:	40 f4       	brcc	.+16     	; 0x7ae <__fp_round+0x20>
 79e:	bf 2b       	or	r27, r31
 7a0:	11 f4       	brne	.+4      	; 0x7a6 <__fp_round+0x18>
 7a2:	60 ff       	sbrs	r22, 0
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <__fp_round+0x20>
 7a6:	6f 5f       	subi	r22, 0xFF	; 255
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	08 95       	ret

000007b0 <__fp_split3>:
 7b0:	57 fd       	sbrc	r21, 7
 7b2:	90 58       	subi	r25, 0x80	; 128
 7b4:	44 0f       	add	r20, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <__fp_splitA+0x10>
 7ba:	5f 3f       	cpi	r21, 0xFF	; 255
 7bc:	71 f0       	breq	.+28     	; 0x7da <__fp_splitA+0x1a>
 7be:	47 95       	ror	r20

000007c0 <__fp_splitA>:
 7c0:	88 0f       	add	r24, r24
 7c2:	97 fb       	bst	r25, 7
 7c4:	99 1f       	adc	r25, r25
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <__fp_splitA+0x20>
 7c8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ca:	79 f0       	breq	.+30     	; 0x7ea <__fp_splitA+0x2a>
 7cc:	87 95       	ror	r24
 7ce:	08 95       	ret
 7d0:	12 16       	cp	r1, r18
 7d2:	13 06       	cpc	r1, r19
 7d4:	14 06       	cpc	r1, r20
 7d6:	55 1f       	adc	r21, r21
 7d8:	f2 cf       	rjmp	.-28     	; 0x7be <__fp_split3+0xe>
 7da:	46 95       	lsr	r20
 7dc:	f1 df       	rcall	.-30     	; 0x7c0 <__fp_splitA>
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <__fp_splitA+0x30>
 7e0:	16 16       	cp	r1, r22
 7e2:	17 06       	cpc	r1, r23
 7e4:	18 06       	cpc	r1, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	f1 cf       	rjmp	.-30     	; 0x7cc <__fp_splitA+0xc>
 7ea:	86 95       	lsr	r24
 7ec:	71 05       	cpc	r23, r1
 7ee:	61 05       	cpc	r22, r1
 7f0:	08 94       	sec
 7f2:	08 95       	ret

000007f4 <__fp_zero>:
 7f4:	e8 94       	clt

000007f6 <__fp_szero>:
 7f6:	bb 27       	eor	r27, r27
 7f8:	66 27       	eor	r22, r22
 7fa:	77 27       	eor	r23, r23
 7fc:	cb 01       	movw	r24, r22
 7fe:	97 f9       	bld	r25, 7
 800:	08 95       	ret

00000802 <__mulsf3>:
 802:	0e 94 14 04 	call	0x828	; 0x828 <__mulsf3x>
 806:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_round>
 80a:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscA>
 80e:	38 f0       	brcs	.+14     	; 0x81e <__mulsf3+0x1c>
 810:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_pscB>
 814:	20 f0       	brcs	.+8      	; 0x81e <__mulsf3+0x1c>
 816:	95 23       	and	r25, r21
 818:	11 f0       	breq	.+4      	; 0x81e <__mulsf3+0x1c>
 81a:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 81e:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_nan>
 822:	11 24       	eor	r1, r1
 824:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_szero>

00000828 <__mulsf3x>:
 828:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_split3>
 82c:	70 f3       	brcs	.-36     	; 0x80a <__mulsf3+0x8>

0000082e <__mulsf3_pse>:
 82e:	95 9f       	mul	r25, r21
 830:	c1 f3       	breq	.-16     	; 0x822 <__mulsf3+0x20>
 832:	95 0f       	add	r25, r21
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	55 1f       	adc	r21, r21
 838:	62 9f       	mul	r22, r18
 83a:	f0 01       	movw	r30, r0
 83c:	72 9f       	mul	r23, r18
 83e:	bb 27       	eor	r27, r27
 840:	f0 0d       	add	r31, r0
 842:	b1 1d       	adc	r27, r1
 844:	63 9f       	mul	r22, r19
 846:	aa 27       	eor	r26, r26
 848:	f0 0d       	add	r31, r0
 84a:	b1 1d       	adc	r27, r1
 84c:	aa 1f       	adc	r26, r26
 84e:	64 9f       	mul	r22, r20
 850:	66 27       	eor	r22, r22
 852:	b0 0d       	add	r27, r0
 854:	a1 1d       	adc	r26, r1
 856:	66 1f       	adc	r22, r22
 858:	82 9f       	mul	r24, r18
 85a:	22 27       	eor	r18, r18
 85c:	b0 0d       	add	r27, r0
 85e:	a1 1d       	adc	r26, r1
 860:	62 1f       	adc	r22, r18
 862:	73 9f       	mul	r23, r19
 864:	b0 0d       	add	r27, r0
 866:	a1 1d       	adc	r26, r1
 868:	62 1f       	adc	r22, r18
 86a:	83 9f       	mul	r24, r19
 86c:	a0 0d       	add	r26, r0
 86e:	61 1d       	adc	r22, r1
 870:	22 1f       	adc	r18, r18
 872:	74 9f       	mul	r23, r20
 874:	33 27       	eor	r19, r19
 876:	a0 0d       	add	r26, r0
 878:	61 1d       	adc	r22, r1
 87a:	23 1f       	adc	r18, r19
 87c:	84 9f       	mul	r24, r20
 87e:	60 0d       	add	r22, r0
 880:	21 1d       	adc	r18, r1
 882:	82 2f       	mov	r24, r18
 884:	76 2f       	mov	r23, r22
 886:	6a 2f       	mov	r22, r26
 888:	11 24       	eor	r1, r1
 88a:	9f 57       	subi	r25, 0x7F	; 127
 88c:	50 40       	sbci	r21, 0x00	; 0
 88e:	9a f0       	brmi	.+38     	; 0x8b6 <__mulsf3_pse+0x88>
 890:	f1 f0       	breq	.+60     	; 0x8ce <__mulsf3_pse+0xa0>
 892:	88 23       	and	r24, r24
 894:	4a f0       	brmi	.+18     	; 0x8a8 <__mulsf3_pse+0x7a>
 896:	ee 0f       	add	r30, r30
 898:	ff 1f       	adc	r31, r31
 89a:	bb 1f       	adc	r27, r27
 89c:	66 1f       	adc	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	88 1f       	adc	r24, r24
 8a2:	91 50       	subi	r25, 0x01	; 1
 8a4:	50 40       	sbci	r21, 0x00	; 0
 8a6:	a9 f7       	brne	.-22     	; 0x892 <__mulsf3_pse+0x64>
 8a8:	9e 3f       	cpi	r25, 0xFE	; 254
 8aa:	51 05       	cpc	r21, r1
 8ac:	80 f0       	brcs	.+32     	; 0x8ce <__mulsf3_pse+0xa0>
 8ae:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 8b2:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_szero>
 8b6:	5f 3f       	cpi	r21, 0xFF	; 255
 8b8:	e4 f3       	brlt	.-8      	; 0x8b2 <__mulsf3_pse+0x84>
 8ba:	98 3e       	cpi	r25, 0xE8	; 232
 8bc:	d4 f3       	brlt	.-12     	; 0x8b2 <__mulsf3_pse+0x84>
 8be:	86 95       	lsr	r24
 8c0:	77 95       	ror	r23
 8c2:	67 95       	ror	r22
 8c4:	b7 95       	ror	r27
 8c6:	f7 95       	ror	r31
 8c8:	e7 95       	ror	r30
 8ca:	9f 5f       	subi	r25, 0xFF	; 255
 8cc:	c1 f7       	brne	.-16     	; 0x8be <__mulsf3_pse+0x90>
 8ce:	fe 2b       	or	r31, r30
 8d0:	88 0f       	add	r24, r24
 8d2:	91 1d       	adc	r25, r1
 8d4:	96 95       	lsr	r25
 8d6:	87 95       	ror	r24
 8d8:	97 f9       	bld	r25, 7
 8da:	08 95       	ret

000008dc <__divmodhi4>:
 8dc:	97 fb       	bst	r25, 7
 8de:	07 2e       	mov	r0, r23
 8e0:	16 f4       	brtc	.+4      	; 0x8e6 <__divmodhi4+0xa>
 8e2:	00 94       	com	r0
 8e4:	07 d0       	rcall	.+14     	; 0x8f4 <__divmodhi4_neg1>
 8e6:	77 fd       	sbrc	r23, 7
 8e8:	09 d0       	rcall	.+18     	; 0x8fc <__divmodhi4_neg2>
 8ea:	0e 94 82 04 	call	0x904	; 0x904 <__udivmodhi4>
 8ee:	07 fc       	sbrc	r0, 7
 8f0:	05 d0       	rcall	.+10     	; 0x8fc <__divmodhi4_neg2>
 8f2:	3e f4       	brtc	.+14     	; 0x902 <__divmodhi4_exit>

000008f4 <__divmodhi4_neg1>:
 8f4:	90 95       	com	r25
 8f6:	81 95       	neg	r24
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	08 95       	ret

000008fc <__divmodhi4_neg2>:
 8fc:	70 95       	com	r23
 8fe:	61 95       	neg	r22
 900:	7f 4f       	sbci	r23, 0xFF	; 255

00000902 <__divmodhi4_exit>:
 902:	08 95       	ret

00000904 <__udivmodhi4>:
 904:	aa 1b       	sub	r26, r26
 906:	bb 1b       	sub	r27, r27
 908:	51 e1       	ldi	r21, 0x11	; 17
 90a:	07 c0       	rjmp	.+14     	; 0x91a <__udivmodhi4_ep>

0000090c <__udivmodhi4_loop>:
 90c:	aa 1f       	adc	r26, r26
 90e:	bb 1f       	adc	r27, r27
 910:	a6 17       	cp	r26, r22
 912:	b7 07       	cpc	r27, r23
 914:	10 f0       	brcs	.+4      	; 0x91a <__udivmodhi4_ep>
 916:	a6 1b       	sub	r26, r22
 918:	b7 0b       	sbc	r27, r23

0000091a <__udivmodhi4_ep>:
 91a:	88 1f       	adc	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	5a 95       	dec	r21
 920:	a9 f7       	brne	.-22     	; 0x90c <__udivmodhi4_loop>
 922:	80 95       	com	r24
 924:	90 95       	com	r25
 926:	bc 01       	movw	r22, r24
 928:	cd 01       	movw	r24, r26
 92a:	08 95       	ret

0000092c <_exit>:
 92c:	f8 94       	cli

0000092e <__stop_program>:
 92e:	ff cf       	rjmp	.-2      	; 0x92e <__stop_program>
