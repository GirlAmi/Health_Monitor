
Health Monitor P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000005d8  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a0a  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f7  00000000  00000000  00002202  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ce  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053b  00000000  00000000  00003758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001445  00000000  00000000  00003c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  000050d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 36       	cpi	r26, 0x6E	; 110
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  8e:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_start>:
}
int RX (void)
{
	while  ((UCSR0A & (1 << RXC0))==0);
	return (UDR0);
}
  96:	ec eb       	ldi	r30, 0xBC	; 188
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
  9c:	94 ea       	ldi	r25, 0xA4	; 164
  9e:	90 83       	st	Z, r25
  a0:	90 81       	ld	r25, Z
  a2:	99 23       	and	r25, r25
  a4:	ec f7       	brge	.-6      	; 0xa0 <i2c_start+0xa>
  a6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	98 7f       	andi	r25, 0xF8	; 248
  ac:	98 30       	cpi	r25, 0x08	; 8
  ae:	a1 f4       	brne	.+40     	; 0xd8 <i2c_start+0x42>
  b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ba:	ec eb       	ldi	r30, 0xBC	; 188
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 23       	and	r24, r24
  c2:	ec f7       	brge	.-6      	; 0xbe <i2c_start+0x28>
  c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	98 31       	cpi	r25, 0x18	; 24
  cc:	39 f0       	breq	.+14     	; 0xdc <i2c_start+0x46>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 34       	cpi	r25, 0x40	; 64
  d2:	29 f4       	brne	.+10     	; 0xde <i2c_start+0x48>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret

000000e0 <i2c_write>:
  e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <i2c_write+0xe>
  f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	98 32       	cpi	r25, 0x28	; 40
  fe:	09 f4       	brne	.+2      	; 0x102 <i2c_write+0x22>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret

00000104 <ADC_init>:
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 10a:	87 e8       	ldi	r24, 0x87	; 135
 10c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 110:	08 95       	ret

00000112 <ADC_read>:
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	98 7f       	andi	r25, 0xF8	; 248
 11a:	90 83       	st	Z, r25
 11c:	90 81       	ld	r25, Z
 11e:	89 2b       	or	r24, r25
 120:	80 83       	st	Z, r24
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
 12c:	80 81       	ld	r24, Z
 12e:	86 fd       	sbrc	r24, 6
 130:	fd cf       	rjmp	.-6      	; 0x12c <ADC_read+0x1a>
 132:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 136:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 13a:	08 95       	ret

0000013c <Dec_Hex>:
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	9c 01       	movw	r18, r24
 142:	fb 01       	movw	r30, r22
 144:	64 e6       	ldi	r22, 0x64	; 100
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 c2 02 	call	0x584	; 0x584 <__divmodhi4>
 14c:	8b 01       	movw	r16, r22
 14e:	4c e9       	ldi	r20, 0x9C	; 156
 150:	46 03       	mulsu	r20, r22
 152:	c0 01       	movw	r24, r0
 154:	47 9f       	mul	r20, r23
 156:	90 0d       	add	r25, r0
 158:	11 24       	eor	r1, r1
 15a:	82 0f       	add	r24, r18
 15c:	93 1f       	adc	r25, r19
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 c2 02 	call	0x584	; 0x584 <__divmodhi4>
 166:	c8 01       	movw	r24, r16
 168:	c0 96       	adiw	r24, 0x30	; 48
 16a:	95 83       	std	Z+5, r25	; 0x05
 16c:	84 83       	std	Z+4, r24	; 0x04
 16e:	cb 01       	movw	r24, r22
 170:	c0 96       	adiw	r24, 0x30	; 48
 172:	93 83       	std	Z+3, r25	; 0x03
 174:	82 83       	std	Z+2, r24	; 0x02
 176:	44 e6       	ldi	r20, 0x64	; 100
 178:	40 9f       	mul	r20, r16
 17a:	c0 01       	movw	r24, r0
 17c:	41 9f       	mul	r20, r17
 17e:	90 0d       	add	r25, r0
 180:	11 24       	eor	r1, r1
 182:	ab 01       	movw	r20, r22
 184:	44 0f       	add	r20, r20
 186:	55 1f       	adc	r21, r21
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	64 0f       	add	r22, r20
 196:	75 1f       	adc	r23, r21
 198:	68 0f       	add	r22, r24
 19a:	79 1f       	adc	r23, r25
 19c:	26 1b       	sub	r18, r22
 19e:	37 0b       	sbc	r19, r23
 1a0:	20 5d       	subi	r18, 0xD0	; 208
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	31 83       	std	Z+1, r19	; 0x01
 1a6:	20 83       	st	Z, r18
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <LCD_Clear>:
 1ae:	8e ef       	ldi	r24, 0xFE	; 254
 1b0:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1b4:	81 e5       	ldi	r24, 0x51	; 81
 1b6:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1ba:	08 95       	ret

000001bc <LCD_2line>:
 1bc:	8e ef       	ldi	r24, 0xFE	; 254
 1be:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1c2:	85 e4       	ldi	r24, 0x45	; 69
 1c4:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1c8:	80 e4       	ldi	r24, 0x40	; 64
 1ca:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1ce:	08 95       	ret

000001d0 <Lookup>:
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	a1 f0       	breq	.+40     	; 0x208 <Lookup+0x38>
 1e0:	7b 01       	movw	r14, r22
 1e2:	08 2f       	mov	r16, r24
 1e4:	19 2f       	mov	r17, r25
 1e6:	f8 01       	movw	r30, r16
 1e8:	c1 91       	ld	r28, Z+
 1ea:	8f 01       	movw	r16, r30
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 1f2:	83 ec       	ldi	r24, 0xC3	; 195
 1f4:	99 e0       	ldi	r25, 0x09	; 9
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Lookup+0x26>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <Lookup+0x2c>
 1fc:	00 00       	nop
 1fe:	8c 2f       	mov	r24, r28
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	e8 16       	cp	r14, r24
 204:	f9 06       	cpc	r15, r25
 206:	79 f7       	brne	.-34     	; 0x1e6 <Lookup+0x16>
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <USART>:
 214:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 218:	83 e3       	ldi	r24, 0x33	; 51
 21a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 21e:	e0 ec       	ldi	r30, 0xC0	; 192
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	82 60       	ori	r24, 0x02	; 2
 226:	80 83       	st	Z, r24
 228:	8e e0       	ldi	r24, 0x0E	; 14
 22a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 22e:	08 95       	ret

00000230 <TX>:

void TX (char TX_Data)
{
	PORTD |= _BV(SYNC_P);
 230:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	00 00       	nop
	_delay_us(1);
	PORTD &= ~_BV(SYNC_P);	
 234:	5f 98       	cbi	0x0b, 7	; 11
	
	//Enable Transmitter
	UCSR0B = (1 << TXEN0);
 236:	98 e0       	ldi	r25, 0x08	; 8
 238:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//Wait until the Transmitter is ready
	while (! (UCSR0A & (1 << UDRE0)) );
 23c:	e0 ec       	ldi	r30, 0xC0	; 192
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <TX+0x10>
	//Send Data
	UDR0 = TX_Data;
 246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	//Disable Transmitter
	UCSR0B = (0 << TXEN0);
 24a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 24e:	08 95       	ret

00000250 <Packet>:
	return;
}

//********************************************** Frame Loop 
void Packet (char data, char address)
{ 
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	c8 2f       	mov	r28, r24
 256:	d6 2f       	mov	r29, r22
	char checksum=0; 
	
	TX(PREAMBLE);
 258:	80 e4       	ldi	r24, 0x40	; 64
 25a:	0e 94 18 01 	call	0x230	; 0x230 <TX>
	TX(PREAMBLE);
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	0e 94 18 01 	call	0x230	; 0x230 <TX>
	TX(PREAMBLE);
 264:	80 e4       	ldi	r24, 0x40	; 64
 266:	0e 94 18 01 	call	0x230	; 0x230 <TX>
	TX(KEYWORD);
 26a:	87 e3       	ldi	r24, 0x37	; 55
 26c:	0e 94 18 01 	call	0x230	; 0x230 <TX>
	TX(address); 
 270:	8d 2f       	mov	r24, r29
 272:	0e 94 18 01 	call	0x230	; 0x230 <TX>
	TX(data);
 276:	8c 2f       	mov	r24, r28
 278:	0e 94 18 01 	call	0x230	; 0x230 <TX>
	checksum= address+data;
	TX(checksum);
 27c:	8d 2f       	mov	r24, r29
 27e:	8c 0f       	add	r24, r28
 280:	0e 94 18 01 	call	0x230	; 0x230 <TX>
	
	return;
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <main>:
char Title[] = {"   Welcome to NAD!"};
char Title1[] = {"    by Amilya DD."};

//**************************************************
int main(void) 
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <main+0x6>
 290:	00 d0       	rcall	.+0      	; 0x292 <main+0x8>
 292:	00 d0       	rcall	.+0      	; 0x294 <main+0xa>
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
	/* Enable the ADC and LCD functions */
	ADC_init();
 298:	0e 94 82 00 	call	0x104	; 0x104 <ADC_init>
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 29c:	8d ef       	ldi	r24, 0xFD	; 253
 29e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	i2c_init();
	USART ();
 2a2:	0e 94 0a 01 	call	0x214	; 0x214 <USART>
	
	/* Set the Ports as an output or input. */
	DDRB  |= _BV(LED_PIN);			//Output
 2a6:	20 9a       	sbi	0x04, 0	; 4
	DDRD  |= _BV(SYNC_P);		   //Output
 2a8:	57 9a       	sbi	0x0a, 7	; 10
	int BP2= 0;
	int packet_cnt=0; 
	 
	
	/* LCD Title Display */
	i2c_start(0x50);				// Comm with LCD address
 2aa:	80 e5       	ldi	r24, 0x50	; 80
 2ac:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	2f e7       	ldi	r18, 0x7F	; 127
 2b2:	88 e3       	ldi	r24, 0x38	; 56
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x2c>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x36>
 2c0:	00 00       	nop
	_delay_ms(400);
	LCD_Clear ();
 2c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Clear>
	end= 0x21;
	Lookup (Title, end );
 2c6:	61 e2       	ldi	r22, 0x21	; 33
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	82 e1       	ldi	r24, 0x12	; 18
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Lookup>
 2d2:	ef e0       	ldi	r30, 0x0F	; 15
 2d4:	f7 e2       	ldi	r31, 0x27	; 39
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0x4c>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x52>
 2dc:	00 00       	nop
	_delay_ms(40);
	LCD_2line ();
 2de:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_2line>
	end= 0x2E;
	Lookup (Title1, end );
 2e2:	6e e2       	ldi	r22, 0x2E	; 46
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Lookup>
 2ee:	ff ef       	ldi	r31, 0xFF	; 255
 2f0:	24 e3       	ldi	r18, 0x34	; 52
 2f2:	8c e0       	ldi	r24, 0x0C	; 12
 2f4:	f1 50       	subi	r31, 0x01	; 1
 2f6:	20 40       	sbci	r18, 0x00	; 0
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x6a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x74>
 2fe:	00 00       	nop
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 300:	84 e9       	ldi	r24, 0x94	; 148
 302:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		} while (Tcnt < 11);					//Count period 10 times
		
		BPM= (60 * (1/(avgcnt/1400)));			//BPM Calculations
			
		/* Convert Decimal to hex for LCD */
		BPM++;
 306:	01 e0       	ldi	r16, 0x01	; 1
 308:	10 e0       	ldi	r17, 0x00	; 0
 30a:	0f 2e       	mov	r0, r31
 30c:	fc eb       	ldi	r31, 0xBC	; 188
 30e:	cf 2e       	mov	r12, r31
 310:	d1 2c       	mov	r13, r1
 312:	f0 2d       	mov	r31, r0
 314:	0f 2e       	mov	r0, r31
 316:	f4 e9       	ldi	r31, 0x94	; 148
 318:	ff 2e       	mov	r15, r31
 31a:	f0 2d       	mov	r31, r0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <main+0x98>
		if (BPM == 180)
		BPM=0;
 31e:	00 e0       	ldi	r16, 0x00	; 0
 320:	10 e0       	ldi	r17, 0x00	; 0
		LCD[3]=0;
 322:	18 86       	std	Y+8, r1	; 0x08
 324:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(BPM, LCD);
 326:	be 01       	movw	r22, r28
 328:	6f 5f       	subi	r22, 0xFF	; 255
 32a:	7f 4f       	sbci	r23, 0xFF	; 255
 32c:	c8 01       	movw	r24, r16
 32e:	0e 94 9e 00 	call	0x13c	; 0x13c <Dec_Hex>
		
		/* LCD BPM Display */
		i2c_start(0x50);						// Comm with LCD 0Faddress
 332:	80 e5       	ldi	r24, 0x50	; 80
 334:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 338:	ef e0       	ldi	r30, 0x0F	; 15
 33a:	f7 e2       	ldi	r31, 0x27	; 39
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0xb2>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xb8>
 342:	00 00       	nop
		_delay_ms(40);
		LCD_Clear();
 344:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Clear>
		end= 0x3E;
		Lookup (BPMD, end);
 348:	6e e3       	ldi	r22, 0x3E	; 62
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	8b e5       	ldi	r24, 0x5B	; 91
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Lookup>
		//	Lookup (Pulse_Repo, end);
		//	_delay_ms(40);
		//	i2c_stop();
		//} else
		//{
			i2c_write(LCD[2]);
 354:	8d 81       	ldd	r24, Y+5	; 0x05
 356:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 35a:	83 ec       	ldi	r24, 0xC3	; 195
 35c:	99 e0       	ldi	r25, 0x09	; 9
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <main+0xd4>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0xda>
 364:	00 00       	nop
			_delay_ms(10);
			i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 36c:	e3 ec       	ldi	r30, 0xC3	; 195
 36e:	f9 e0       	ldi	r31, 0x09	; 9
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <main+0xe6>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0xec>
 376:	00 00       	nop
			_delay_ms(10);
			i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 37e:	ff e3       	ldi	r31, 0x3F	; 63
 380:	2d e0       	ldi	r18, 0x0D	; 13
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	f1 50       	subi	r31, 0x01	; 1
 386:	20 40       	sbci	r18, 0x00	; 0
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <main+0xfa>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x104>
 38e:	00 00       	nop
 390:	f6 01       	movw	r30, r12
 392:	f0 82       	st	Z, r15
 394:	89 ef       	ldi	r24, 0xF9	; 249
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <main+0x10e>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x114>
 39e:	00 00       	nop
	
		/* Transmit Frame */
		//while (packet_cnt==3)
		//{
			_delay_ms(1);
			Packet(BPM, BPMADDRESS);
 3a0:	61 e3       	ldi	r22, 0x31	; 49
 3a2:	80 2f       	mov	r24, r16
 3a4:	0e 94 28 01 	call	0x250	; 0x250 <Packet>
 3a8:	ef e0       	ldi	r30, 0x0F	; 15
 3aa:	f7 e2       	ldi	r31, 0x27	; 39
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x122>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x128>
 3b2:	00 00       	nop
		//	packet_cnt++; 
		//}
		//	packet_cnt=0; 
									
		/* Temperature Sensor *************************************************/
		temp = ADC_read(ADC_PIN1);			//Check temperature
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 89 00 	call	0x112	; 0x112 <ADC_read>
		temp = (temp -102)/2;
		temp=37;

		/* Convert Decimal to hex for LCD */
		LCD[3]=0;
 3ba:	18 86       	std	Y+8, r1	; 0x08
 3bc:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(temp, LCD);
 3be:	be 01       	movw	r22, r28
 3c0:	6f 5f       	subi	r22, 0xFF	; 255
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	85 e2       	ldi	r24, 0x25	; 37
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 9e 00 	call	0x13c	; 0x13c <Dec_Hex>
			
		/* LCD temp Display */
		i2c_start(0x50);					// Comm with LCD address
 3cc:	80 e5       	ldi	r24, 0x50	; 80
 3ce:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 3d2:	8f e0       	ldi	r24, 0x0F	; 15
 3d4:	97 e2       	ldi	r25, 0x27	; 39
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x14c>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x152>
 3dc:	00 00       	nop
		_delay_ms(40);
		LCD_2line ();
 3de:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_2line>
		end= 0x3E;
		Lookup (TempD, end);
 3e2:	6e e3       	ldi	r22, 0x3E	; 62
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	89 e4       	ldi	r24, 0x49	; 73
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Lookup>
		i2c_write(LCD[2]);
 3ee:	8d 81       	ldd	r24, Y+5	; 0x05
 3f0:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 3f4:	e3 ec       	ldi	r30, 0xC3	; 195
 3f6:	f9 e0       	ldi	r31, 0x09	; 9
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x16e>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x174>
 3fe:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 406:	83 ec       	ldi	r24, 0xC3	; 195
 408:	99 e0       	ldi	r25, 0x09	; 9
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 418:	9f e3       	ldi	r25, 0x3F	; 63
 41a:	ed e0       	ldi	r30, 0x0D	; 13
 41c:	f3 e0       	ldi	r31, 0x03	; 3
 41e:	91 50       	subi	r25, 0x01	; 1
 420:	e0 40       	sbci	r30, 0x00	; 0
 422:	f0 40       	sbci	r31, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	f6 01       	movw	r30, r12
 42c:	f0 82       	st	Z, r15
 42e:	89 ef       	ldi	r24, 0xF9	; 249
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop

		/* Transmit Frame */
		//while (packet_cnt==3)
		//{
			_delay_ms(1);
			Packet(temp, tempADDRESS);
 43a:	64 e5       	ldi	r22, 0x54	; 84
 43c:	85 e2       	ldi	r24, 0x25	; 37
 43e:	0e 94 28 01 	call	0x250	; 0x250 <Packet>
 442:	ef e0       	ldi	r30, 0x0F	; 15
 444:	f7 e2       	ldi	r31, 0x27	; 39
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
		
		BP1= 0.325*(avgcnt/10)+122.35;			//BPM Calculations
			
		/* Convert Decimal to hex for LCD */
		BP1= 132; 
		LCD[3]=0;
 44e:	18 86       	std	Y+8, r1	; 0x08
 450:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(BP1, LCD);
 452:	be 01       	movw	r22, r28
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	84 e8       	ldi	r24, 0x84	; 132
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 9e 00 	call	0x13c	; 0x13c <Dec_Hex>
		
		/* LCD temp Display */
		i2c_start(0x50);					// Comm with LCD address
 460:	80 e5       	ldi	r24, 0x50	; 80
 462:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 466:	8f e0       	ldi	r24, 0x0F	; 15
 468:	97 e2       	ldi	r25, 0x27	; 39
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
		_delay_ms(40);
		LCD_Clear ();
 472:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Clear>
		end= 0x3E;
		Lookup (BloodPD1, end);
 476:	6e e3       	ldi	r22, 0x3E	; 62
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	87 e3       	ldi	r24, 0x37	; 55
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Lookup>
		i2c_write(LCD[2]);
 482:	8d 81       	ldd	r24, Y+5	; 0x05
 484:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 488:	e3 ec       	ldi	r30, 0xC3	; 195
 48a:	f9 e0       	ldi	r31, 0x09	; 9
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 49a:	83 ec       	ldi	r24, 0xC3	; 195
 49c:	99 e0       	ldi	r25, 0x09	; 9
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 4a6:	89 81       	ldd	r24, Y+1	; 0x01
 4a8:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 4ac:	9f e3       	ldi	r25, 0x3F	; 63
 4ae:	ed e0       	ldi	r30, 0x0D	; 13
 4b0:	f3 e0       	ldi	r31, 0x03	; 3
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	e0 40       	sbci	r30, 0x00	; 0
 4b6:	f0 40       	sbci	r31, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop
 4be:	f6 01       	movw	r30, r12
 4c0:	f0 82       	st	Z, r15
 4c2:	89 ef       	ldi	r24, 0xF9	; 249
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
		
		/* Transmit Frame */
		//while (packet_cnt==3)
		//{
			_delay_ms(1);
			Packet(BP1, BP1ADDRESS);
 4ce:	62 e4       	ldi	r22, 0x42	; 66
 4d0:	84 e8       	ldi	r24, 0x84	; 132
 4d2:	0e 94 28 01 	call	0x250	; 0x250 <Packet>
 4d6:	ef e0       	ldi	r30, 0x0F	; 15
 4d8:	f7 e2       	ldi	r31, 0x27	; 39
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e0:	00 00       	nop
		
		//BP2= 0.325*(avgcnt/10)+122.35;			//BPM Calculations
		
		/* Convert Decimal to hex for LCD */
		BP2= 130;
		LCD[3]=0;
 4e2:	18 86       	std	Y+8, r1	; 0x08
 4e4:	1f 82       	std	Y+7, r1	; 0x07
		Dec_Hex(BP2, LCD);
 4e6:	be 01       	movw	r22, r28
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	82 e8       	ldi	r24, 0x82	; 130
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 9e 00 	call	0x13c	; 0x13c <Dec_Hex>
		
		/* LCD temp Display */
		i2c_start(0x50);					// Comm with LCD address
 4f4:	80 e5       	ldi	r24, 0x50	; 80
 4f6:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_start>
 4fa:	8f e0       	ldi	r24, 0x0F	; 15
 4fc:	97 e2       	ldi	r25, 0x27	; 39
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 504:	00 00       	nop
		_delay_ms(40);
		LCD_2line ();
 506:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_2line>
		end= 0x3E;
		Lookup (BloodPD2, end);
 50a:	6e e3       	ldi	r22, 0x3E	; 62
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	85 e2       	ldi	r24, 0x25	; 37
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Lookup>
		i2c_write(LCD[2]);
 516:	8d 81       	ldd	r24, Y+5	; 0x05
 518:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 51c:	e3 ec       	ldi	r30, 0xC3	; 195
 51e:	f9 e0       	ldi	r31, 0x09	; 9
 520:	31 97       	sbiw	r30, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 524:	00 c0       	rjmp	.+0      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 526:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[1]);					// ASCII equiv. of BPM 10
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 52e:	83 ec       	ldi	r24, 0xC3	; 195
 530:	99 e0       	ldi	r25, 0x09	; 9
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 536:	00 c0       	rjmp	.+0      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 538:	00 00       	nop
		_delay_ms(10);
		i2c_write(LCD[0]);					// ASCII equiv. of BPM 1
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	0e 94 70 00 	call	0xe0	; 0xe0 <i2c_write>
 540:	9f e3       	ldi	r25, 0x3F	; 63
 542:	ed e0       	ldi	r30, 0x0D	; 13
 544:	f3 e0       	ldi	r31, 0x03	; 3
 546:	91 50       	subi	r25, 0x01	; 1
 548:	e0 40       	sbci	r30, 0x00	; 0
 54a:	f0 40       	sbci	r31, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 550:	00 00       	nop
 552:	f6 01       	movw	r30, r12
 554:	f0 82       	st	Z, r15
 556:	89 ef       	ldi	r24, 0xF9	; 249
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 560:	00 00       	nop
		
		/* Transmit Frame */
	//	while (packet_cnt==3)
	//	{
			_delay_ms(1);
			Packet(BP2, BP2ADDRESS);
 562:	62 e6       	ldi	r22, 0x62	; 98
 564:	82 e8       	ldi	r24, 0x82	; 130
 566:	0e 94 28 01 	call	0x250	; 0x250 <Packet>
 56a:	ef e0       	ldi	r30, 0x0F	; 15
 56c:	f7 e2       	ldi	r31, 0x27	; 39
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 574:	00 00       	nop
		} while (Tcnt < 11);					//Count period 10 times
		
		BPM= (60 * (1/(avgcnt/1400)));			//BPM Calculations
			
		/* Convert Decimal to hex for LCD */
		BPM++;
 576:	0f 5f       	subi	r16, 0xFF	; 255
 578:	1f 4f       	sbci	r17, 0xFF	; 255
		if (BPM == 180)
 57a:	04 3b       	cpi	r16, 0xB4	; 180
 57c:	11 05       	cpc	r17, r1
 57e:	09 f0       	breq	.+2      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 580:	d0 ce       	rjmp	.-608    	; 0x322 <main+0x98>
 582:	cd ce       	rjmp	.-614    	; 0x31e <main+0x94>

00000584 <__divmodhi4>:
 584:	97 fb       	bst	r25, 7
 586:	07 2e       	mov	r0, r23
 588:	16 f4       	brtc	.+4      	; 0x58e <__divmodhi4+0xa>
 58a:	00 94       	com	r0
 58c:	07 d0       	rcall	.+14     	; 0x59c <__divmodhi4_neg1>
 58e:	77 fd       	sbrc	r23, 7
 590:	09 d0       	rcall	.+18     	; 0x5a4 <__divmodhi4_neg2>
 592:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodhi4>
 596:	07 fc       	sbrc	r0, 7
 598:	05 d0       	rcall	.+10     	; 0x5a4 <__divmodhi4_neg2>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__divmodhi4_exit>

0000059c <__divmodhi4_neg1>:
 59c:	90 95       	com	r25
 59e:	81 95       	neg	r24
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <__divmodhi4_neg2>:
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255

000005aa <__divmodhi4_exit>:
 5aa:	08 95       	ret

000005ac <__udivmodhi4>:
 5ac:	aa 1b       	sub	r26, r26
 5ae:	bb 1b       	sub	r27, r27
 5b0:	51 e1       	ldi	r21, 0x11	; 17
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <__udivmodhi4_ep>

000005b4 <__udivmodhi4_loop>:
 5b4:	aa 1f       	adc	r26, r26
 5b6:	bb 1f       	adc	r27, r27
 5b8:	a6 17       	cp	r26, r22
 5ba:	b7 07       	cpc	r27, r23
 5bc:	10 f0       	brcs	.+4      	; 0x5c2 <__udivmodhi4_ep>
 5be:	a6 1b       	sub	r26, r22
 5c0:	b7 0b       	sbc	r27, r23

000005c2 <__udivmodhi4_ep>:
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	5a 95       	dec	r21
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__udivmodhi4_loop>
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	bc 01       	movw	r22, r24
 5d0:	cd 01       	movw	r24, r26
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
